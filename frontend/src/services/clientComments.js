import apiFetch from './api';

const clientCommentsService = {
  /**
   * Crear un nuevo comentario
   */
  async createComment(companyId, comment) {
    try {
      console.log('üí¨ Creando comentario para cliente:', companyId);
      const response = await apiFetch('/api/client-comments', {
        method: 'POST',
        body: JSON.stringify({
          company_id: companyId,
          comment: comment
        })
      });
      console.log('‚úÖ Comentario creado:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error creando comentario:', error);
      throw error;
    }
  },

  /**
   * Obtener comentarios de un cliente
   */
  async getCommentsByCompany(companyId) {
    try {
      const response = await apiFetch(`/api/client-comments/company/${companyId}`, {
        method: 'GET'
      });
      return response;
    } catch (error) {
      console.error('Error obteniendo comentarios:', error);
      throw error;
    }
  },

  /**
   * Actualizar un comentario
   */
  async updateComment(commentId, comment) {
    try {
      console.log('üí¨ Actualizando comentario:', commentId);
      const response = await apiFetch(`/api/client-comments/${commentId}`, {
        method: 'PUT',
        body: JSON.stringify({
          comment: comment
        })
      });
      console.log('‚úÖ Comentario actualizado:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error actualizando comentario:', error);
      throw error;
    }
  },

  /**
   * Eliminar un comentario
   */
  async deleteComment(commentId) {
    try {
      console.log('üí¨ Eliminando comentario:', commentId);
      const response = await apiFetch(`/api/client-comments/${commentId}`, {
        method: 'DELETE'
      });
      console.log('‚úÖ Comentario eliminado:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error eliminando comentario:', error);
      throw error;
    }
  },

  /**
   * Marcar comentarios como le√≠dos
   */
  async markCommentsAsRead(companyId) {
    try {
      console.log('üí¨ Marcando comentarios como le√≠dos para cliente:', companyId);
      const response = await apiFetch(`/api/client-comments/company/${companyId}/mark-read`, {
        method: 'POST'
      });
      console.log('‚úÖ Comentarios marcados como le√≠dos:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error marcando comentarios como le√≠dos:', error);
      throw error;
    }
  },

  /**
   * Obtener comentarios no le√≠dos
   */
  async getUnreadComments() {
    try {
      console.log('üí¨ Obteniendo comentarios no le√≠dos');
      const response = await apiFetch('/api/client-comments/unread', {
        method: 'GET'
      });
      console.log('‚úÖ Comentarios no le√≠dos obtenidos:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error obteniendo comentarios no le√≠dos:', error);
      throw error;
    }
  },

  /**
   * Obtener comentarios recientes
   */
  async getRecentComments(limit = 10) {
    try {
      console.log('üí¨ Obteniendo comentarios recientes');
      const response = await apiFetch(`/api/client-comments/recent?limit=${limit}`, {
        method: 'GET'
      });
      console.log('‚úÖ Comentarios recientes obtenidos:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error obteniendo comentarios recientes:', error);
      throw error;
    }
  },

  /**
   * Obtener estad√≠sticas de comentarios
   */
  async getCommentsStats() {
    try {
      console.log('üí¨ Obteniendo estad√≠sticas de comentarios');
      const response = await apiFetch('/api/client-comments/stats', {
        method: 'GET'
      });
      console.log('‚úÖ Estad√≠sticas obtenidas:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      throw error;
    }
  }
};

export default clientCommentsService;
