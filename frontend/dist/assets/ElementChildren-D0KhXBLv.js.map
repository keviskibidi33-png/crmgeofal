{"version":3,"file":"ElementChildren-D0KhXBLv.js","sources":["../../node_modules/react-bootstrap/esm/ElementChildren.js"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\n/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\nexport { map, forEach, hasChildOfType };"],"names":["map","children","func","index","React.Children","child","React.isValidElement","forEach","hasChildOfType","type"],"mappings":"wCAUA,SAASA,EAAIC,EAAUC,EAAM,CAC3B,IAAIC,EAAQ,EACZ,OAAOC,WAAe,IAAIH,EAAUI,GAAsBC,EAAAA,eAAqBD,CAAK,EAAIH,EAAKG,EAAOF,GAAO,EAAIE,CAAK,CACtH,CAQA,SAASE,EAAQN,EAAUC,EAAM,CAC/B,IAAIC,EAAQ,EACZC,WAAe,QAAQH,EAAUI,GAAS,CACtBC,EAAAA,eAAqBD,CAAK,GAAGH,EAAKG,EAAOF,GAAO,CACpE,CAAC,CACH,CAMA,SAASK,EAAeP,EAAUQ,EAAM,CACtC,OAAOL,WAAe,QAAQH,CAAQ,EAAE,KAAKI,GAAsBC,EAAAA,eAAqBD,CAAK,GAAKA,EAAM,OAASI,CAAI,CACvH","x_google_ignoreList":[0]}