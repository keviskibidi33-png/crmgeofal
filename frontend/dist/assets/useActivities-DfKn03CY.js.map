{"version":3,"file":"useActivities-DfKn03CY.js","sources":["../../src/services/activities.js","../../src/hooks/useActivities.js"],"sourcesContent":["import { apiFetch } from './api';\r\n\r\n// Obtener actividades recientes\r\nexport const getRecentActivities = (params = {}) => {\r\n  const qs = new URLSearchParams(params).toString();\r\n  const path = qs ? `/api/activities/recent?${qs}` : '/api/activities/recent';\r\n  return apiFetch(path);\r\n};\r\n\r\n// Obtener actividades del usuario actual\r\nexport const getUserActivities = (params = {}) => {\r\n  const qs = new URLSearchParams(params).toString();\r\n  const path = qs ? `/api/activities/user?${qs}` : '/api/activities/user';\r\n  return apiFetch(path);\r\n};\r\n\r\n// Obtener actividades por tipo\r\nexport const getActivitiesByType = (type, params = {}) => {\r\n  const qs = new URLSearchParams(params).toString();\r\n  const path = qs ? `/api/activities/type/${type}?${qs}` : `/api/activities/type/${type}`;\r\n  return apiFetch(path);\r\n};\r\n\r\n// Obtener actividades por entidad\r\nexport const getActivitiesByEntity = (entityType, entityId, params = {}) => {\r\n  const qs = new URLSearchParams(params).toString();\r\n  const path = qs ? `/api/activities/entity/${entityType}/${entityId}?${qs}` : `/api/activities/entity/${entityType}/${entityId}`;\r\n  return apiFetch(path);\r\n};\r\n\r\n// Obtener estadísticas de actividades\r\nexport const getActivityStats = (params = {}) => {\r\n  const qs = new URLSearchParams(params).toString();\r\n  const path = qs ? `/api/activities/stats?${qs}` : '/api/activities/stats';\r\n  return apiFetch(path);\r\n};\r\n\r\n// Crear actividad (solo admin)\r\nexport const createActivity = (activityData) => {\r\n  return apiFetch('/api/activities/create', {\r\n    method: 'POST',\r\n    body: JSON.stringify(activityData)\r\n  });\r\n};\r\n\r\n// Tipos de actividades según el flujo de trabajo\r\nexport const ACTIVITY_TYPES = {\r\n  // Cotizaciones\r\n  QUOTE_CREATED: 'quote_created',\r\n  QUOTE_ASSIGNED: 'quote_assigned',\r\n  QUOTE_APPROVED: 'quote_approved',\r\n  QUOTE_REJECTED: 'quote_rejected',\r\n  QUOTE_COMPLETED: 'quote_completed',\r\n  \r\n  // Proyectos\r\n  PROJECT_CREATED: 'project_created',\r\n  PROJECT_ASSIGNED: 'project_assigned',\r\n  PROJECT_STARTED: 'project_started',\r\n  PROJECT_COMPLETED: 'project_completed',\r\n  PROJECT_DELAYED: 'project_delayed',\r\n  \r\n  // Tickets\r\n  TICKET_CREATED: 'ticket_created',\r\n  TICKET_ASSIGNED: 'ticket_assigned',\r\n  TICKET_RESOLVED: 'ticket_resolved',\r\n  TICKET_ESCALATED: 'ticket_escalated',\r\n  \r\n  // Evidencias\r\n  EVIDENCE_UPLOADED: 'evidence_uploaded',\r\n  EVIDENCE_APPROVED: 'evidence_approved',\r\n  EVIDENCE_REJECTED: 'evidence_rejected',\r\n  \r\n  // Usuarios\r\n  USER_REGISTERED: 'user_registered',\r\n  USER_ASSIGNED: 'user_assigned',\r\n  USER_ROLE_CHANGED: 'user_role_changed',\r\n  \r\n  // Clientes\r\n  CLIENT_CREATED: 'client_created',\r\n  CLIENT_UPDATED: 'client_updated',\r\n  \r\n  // Sistema\r\n  SYSTEM_MAINTENANCE: 'system_maintenance',\r\n  SYSTEM_UPDATE: 'system_update'\r\n};\r\n\r\n// Entidades del sistema\r\nexport const ENTITY_TYPES = {\r\n  QUOTE: 'quote',\r\n  PROJECT: 'project',\r\n  TICKET: 'ticket',\r\n  EVIDENCE: 'evidence',\r\n  USER: 'user',\r\n  CLIENT: 'client',\r\n  SYSTEM: 'system'\r\n};\r\n\r\n// Configuración de actividades por rol\r\nexport const ROLE_ACTIVITY_CONFIG = {\r\n  admin: {\r\n    types: Object.values(ACTIVITY_TYPES),\r\n    priority: 'high'\r\n  },\r\n  jefa_comercial: {\r\n    types: [\r\n      ACTIVITY_TYPES.QUOTE_CREATED,\r\n      ACTIVITY_TYPES.QUOTE_APPROVED,\r\n      ACTIVITY_TYPES.QUOTE_REJECTED,\r\n      ACTIVITY_TYPES.PROJECT_CREATED,\r\n      ACTIVITY_TYPES.PROJECT_COMPLETED,\r\n      ACTIVITY_TYPES.TICKET_ESCALATED,\r\n      ACTIVITY_TYPES.CLIENT_CREATED,\r\n      ACTIVITY_TYPES.CLIENT_UPDATED\r\n    ],\r\n    priority: 'high'\r\n  },\r\n  vendedor_comercial: {\r\n    types: [\r\n      ACTIVITY_TYPES.QUOTE_CREATED,\r\n      ACTIVITY_TYPES.QUOTE_ASSIGNED,\r\n      ACTIVITY_TYPES.PROJECT_CREATED,\r\n      ACTIVITY_TYPES.PROJECT_ASSIGNED,\r\n      ACTIVITY_TYPES.TICKET_CREATED,\r\n      ACTIVITY_TYPES.CLIENT_CREATED,\r\n      ACTIVITY_TYPES.CLIENT_UPDATED\r\n    ],\r\n    priority: 'normal'\r\n  },\r\n  jefe_laboratorio: {\r\n    types: [\r\n      ACTIVITY_TYPES.QUOTE_ASSIGNED,\r\n      ACTIVITY_TYPES.QUOTE_COMPLETED,\r\n      ACTIVITY_TYPES.PROJECT_ASSIGNED,\r\n      ACTIVITY_TYPES.PROJECT_COMPLETED,\r\n      ACTIVITY_TYPES.EVIDENCE_UPLOADED,\r\n      ACTIVITY_TYPES.EVIDENCE_APPROVED,\r\n      ACTIVITY_TYPES.EVIDENCE_REJECTED,\r\n      ACTIVITY_TYPES.TICKET_ASSIGNED\r\n    ],\r\n    priority: 'high'\r\n  },\r\n  usuario_laboratorio: {\r\n    types: [\r\n      ACTIVITY_TYPES.QUOTE_ASSIGNED,\r\n      ACTIVITY_TYPES.QUOTE_COMPLETED,\r\n      ACTIVITY_TYPES.PROJECT_ASSIGNED,\r\n      ACTIVITY_TYPES.PROJECT_COMPLETED,\r\n      ACTIVITY_TYPES.EVIDENCE_UPLOADED,\r\n      ACTIVITY_TYPES.TICKET_ASSIGNED\r\n    ],\r\n    priority: 'normal'\r\n  },\r\n  laboratorio: {\r\n    types: [\r\n      ACTIVITY_TYPES.QUOTE_ASSIGNED,\r\n      ACTIVITY_TYPES.QUOTE_COMPLETED,\r\n      ACTIVITY_TYPES.PROJECT_ASSIGNED,\r\n      ACTIVITY_TYPES.PROJECT_COMPLETED,\r\n      ACTIVITY_TYPES.EVIDENCE_UPLOADED,\r\n      ACTIVITY_TYPES.TICKET_ASSIGNED\r\n    ],\r\n    priority: 'normal'\r\n  },\r\n  soporte: {\r\n    types: [\r\n      ACTIVITY_TYPES.TICKET_CREATED,\r\n      ACTIVITY_TYPES.TICKET_ASSIGNED,\r\n      ACTIVITY_TYPES.TICKET_RESOLVED,\r\n      ACTIVITY_TYPES.TICKET_ESCALATED,\r\n      ACTIVITY_TYPES.SYSTEM_MAINTENANCE\r\n    ],\r\n    priority: 'high'\r\n  },\r\n  gerencia: {\r\n    types: [\r\n      ACTIVITY_TYPES.PROJECT_COMPLETED,\r\n      ACTIVITY_TYPES.PROJECT_DELAYED,\r\n      ACTIVITY_TYPES.QUOTE_APPROVED,\r\n      ACTIVITY_TYPES.TICKET_ESCALATED,\r\n      ACTIVITY_TYPES.SYSTEM_UPDATE,\r\n      ACTIVITY_TYPES.USER_REGISTERED,\r\n      ACTIVITY_TYPES.USER_ROLE_CHANGED\r\n    ],\r\n    priority: 'high'\r\n  }\r\n};\r\n\r\nexport default {\r\n  getRecentActivities,\r\n  getUserActivities,\r\n  getActivitiesByType,\r\n  getActivitiesByEntity,\r\n  getActivityStats,\r\n  createActivity,\r\n  ACTIVITY_TYPES,\r\n  ENTITY_TYPES,\r\n  ROLE_ACTIVITY_CONFIG\r\n};\r\n","import { useQuery, useQueryClient } from 'react-query';\r\nimport { getRecentActivities } from '../services/activities';\r\nimport { useSocketNotification } from './useSocket';\r\n\r\n// Hook personalizado para manejar actividades recientes de manera eficiente\r\nexport const useActivities = (options = {}) => {\r\n  const queryClient = useQueryClient();\r\n  const {\r\n    limit = 4,\r\n    refetchInterval = 300000, // 5 minutos por defecto\r\n    staleTime = 60000, // 1 minuto por defecto\r\n    enabled = true,\r\n    userId = null, // Filtrar por usuario específico\r\n    role = null // Filtrar por rol\r\n  } = options;\r\n\r\n  // WebSocket para actualizaciones en tiempo real\r\n  useSocketNotification({\r\n    onNewNotification: (notification) => {\r\n      // Solo invalidar si la notificación es relevante para actividades\r\n      if (notification.type && (\r\n        notification.type.includes('quote') ||\r\n        notification.type.includes('project') ||\r\n        notification.type.includes('ticket') ||\r\n        notification.type.includes('evidence') ||\r\n        notification.type.includes('user') ||\r\n        notification.type.includes('client')\r\n      )) {\r\n        queryClient.invalidateQueries(['recentActivities']);\r\n      }\r\n    },\r\n    onUnreadCountUpdate: () => {\r\n      // Invalidar cuando se actualiza el contador de notificaciones\r\n      queryClient.invalidateQueries(['recentActivities']);\r\n    }\r\n  });\r\n\r\n  // Query principal para actividades\r\n  const activitiesQuery = useQuery(\r\n    ['recentActivities', { limit, userId, role }],\r\n    () => getRecentActivities({ limit, userId, role }),\r\n    {\r\n      enabled,\r\n      refetchInterval,\r\n      staleTime,\r\n      refetchOnWindowFocus: true, // Refrescar cuando el usuario vuelve a la pestaña\r\n      refetchOnMount: true, // Refrescar al montar el componente\r\n      retry: 2, // Reintentar solo 2 veces en caso de error\r\n      retryDelay: 5000, // Esperar 5s entre reintentos\r\n      // Configuración de cache inteligente\r\n      cacheTime: 300000, // Mantener en cache por 5 minutos\r\n      // Configuración de red\r\n      networkMode: 'online', // Solo hacer requests cuando hay conexión\r\n      // Configuración de error\r\n      onError: (error) => {\r\n        console.warn('Error loading activities:', error);\r\n        // No mostrar error al usuario, usar datos de cache si están disponibles\r\n      }\r\n    }\r\n  );\r\n\r\n  // Función para refrescar manualmente\r\n  const refreshActivities = () => {\r\n    queryClient.invalidateQueries(['recentActivities']);\r\n  };\r\n\r\n  // Función para obtener datos de cache sin hacer request\r\n  const getCachedActivities = () => {\r\n    return queryClient.getQueryData(['recentActivities', { limit }]);\r\n  };\r\n\r\n  return {\r\n    ...activitiesQuery,\r\n    refreshActivities,\r\n    getCachedActivities,\r\n    // Estado derivado\r\n    hasActivities: activitiesQuery.data?.activities?.length > 0,\r\n    activitiesCount: activitiesQuery.data?.activities?.length || 0,\r\n    // Configuración de rendimiento\r\n    isOptimized: true,\r\n    lastFetch: activitiesQuery.dataUpdatedAt,\r\n    nextFetch: activitiesQuery.dataUpdatedAt + refetchInterval\r\n  };\r\n};\r\n\r\n// Hook para actividades con configuración de alto rendimiento\r\nexport const useActivitiesHighPerformance = (options = {}) => {\r\n  return useActivities({\r\n    ...options,\r\n    refetchInterval: 600000, // 10 minutos\r\n    staleTime: 300000, // 5 minutos\r\n    enabled: true\r\n  });\r\n};\r\n\r\n// Hook para actividades con configuración de tiempo real\r\nexport const useActivitiesRealTime = (options = {}) => {\r\n  return useActivities({\r\n    ...options,\r\n    refetchInterval: 60000, // 1 minuto\r\n    staleTime: 30000, // 30 segundos\r\n    enabled: true\r\n  });\r\n};\r\n\r\nexport default useActivities;\r\n"],"names":["getRecentActivities","params","qs","path","apiFetch","useActivities","options","queryClient","useQueryClient","limit","refetchInterval","staleTime","enabled","userId","role","useSocketNotification","notification","activitiesQuery","useQuery","error","_b","_a","_d","_c"],"mappings":"8DAGO,MAAMA,EAAsB,CAACC,EAAS,KAAO,CAClD,MAAMC,EAAK,IAAI,gBAAgBD,CAAM,EAAE,SAAQ,EACzCE,EAAOD,EAAK,0BAA0BA,CAAE,GAAK,yBACnD,OAAOE,EAASD,CAAI,CACtB,ECFaE,EAAgB,CAACC,EAAU,KAAO,aAC7C,MAAMC,EAAcC,IACd,CACJ,MAAAC,EAAQ,EACR,gBAAAC,EAAkB,IAClB,UAAAC,EAAY,IACZ,QAAAC,EAAU,GACV,OAAAC,EAAS,KACT,KAAAC,EAAO,IACX,EAAMR,EAGJS,EAAsB,CACpB,kBAAoBC,GAAiB,CAE/BA,EAAa,OACfA,EAAa,KAAK,SAAS,OAAO,GAClCA,EAAa,KAAK,SAAS,SAAS,GACpCA,EAAa,KAAK,SAAS,QAAQ,GACnCA,EAAa,KAAK,SAAS,UAAU,GACrCA,EAAa,KAAK,SAAS,MAAM,GACjCA,EAAa,KAAK,SAAS,QAAQ,IAEnCT,EAAY,kBAAkB,CAAC,kBAAkB,CAAC,CAEtD,EACA,oBAAqB,IAAM,CAEzBA,EAAY,kBAAkB,CAAC,kBAAkB,CAAC,CACpD,CACJ,CAAG,EAGD,MAAMU,EAAkBC,EACtB,CAAC,mBAAoB,CAAE,MAAAT,EAAO,OAAAI,EAAQ,KAAAC,CAAI,CAAE,EAC5C,IAAMd,EAAoB,CAAE,MAAAS,EAAO,OAAAI,EAAQ,KAAAC,CAAI,CAAE,EACjD,CACE,QAAAF,EACA,gBAAAF,EACA,UAAAC,EACA,qBAAsB,GACtB,eAAgB,GAChB,MAAO,EACP,WAAY,IAEZ,UAAW,IAEX,YAAa,SAEb,QAAUQ,GAAU,CAClB,QAAQ,KAAK,4BAA6BA,CAAK,CAEjD,CACN,CACA,EAYE,MAAO,CACL,GAAGF,EACH,kBAXwB,IAAM,CAC9BV,EAAY,kBAAkB,CAAC,kBAAkB,CAAC,CACpD,EAUE,oBAP0B,IACnBA,EAAY,aAAa,CAAC,mBAAoB,CAAE,MAAAE,CAAK,CAAE,CAAC,EAQ/D,gBAAeW,GAAAC,EAAAJ,EAAgB,OAAhB,YAAAI,EAAsB,aAAtB,YAAAD,EAAkC,QAAS,EAC1D,kBAAiBE,GAAAC,EAAAN,EAAgB,OAAhB,YAAAM,EAAsB,aAAtB,YAAAD,EAAkC,SAAU,EAE7D,YAAa,GACb,UAAWL,EAAgB,cAC3B,UAAWA,EAAgB,cAAgBP,CAC/C,CACA"}