{"version":3,"file":"ComprobantesPago-CKku_Sf8.js","sources":["../../src/pages/ComprobantesPago.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Card, Button, Badge, Alert, Spinner, Modal, Form, Table } from 'react-bootstrap';\r\nimport { FiUpload, FiCheck, FiX, FiEye, FiDownload, FiRefreshCw, FiDollarSign, FiFileText, FiHome, FiArchive } from 'react-icons/fi';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport api from '../services/api';\r\n\r\nconst ComprobantesPago = () => {\r\n  const { user } = useAuth();\r\n  const [pendingProofs, setPendingProofs] = useState([]);\r\n  const [approvedProofs, setApprovedProofs] = useState([]);\r\n  const [archivedProofs, setArchivedProofs] = useState([]);\r\n  const [mySubmissions, setMySubmissions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [showUploadModal, setShowUploadModal] = useState(false);\r\n  const [showApprovalModal, setShowApprovalModal] = useState(false);\r\n  const [showRejectionModal, setShowRejectionModal] = useState(false);\r\n  const [showDownloadModal, setShowDownloadModal] = useState(false);\r\n  const [selectedProof, setSelectedProof] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [rejectionReason, setRejectionReason] = useState('');\r\n  const [approvalNotes, setApprovalNotes] = useState('');\r\n  // ✅ NUEVO: Estado para monto real pagado\r\n  const [realAmountPaid, setRealAmountPaid] = useState('');\r\n  const [expandedDescriptions, setExpandedDescriptions] = useState(new Set());\r\n  const [archivingProofs, setArchivingProofs] = useState(new Set());\r\n\r\n  // Formulario de subida completo\r\n  const [uploadForm, setUploadForm] = useState({\r\n    quote_id: '',\r\n    quote_file: null,\r\n    project_files: [],\r\n    description: '',\r\n    amount_paid: '',\r\n    payment_date: '',\r\n    payment_method: '',\r\n    payment_proof: null,\r\n    client_name: '',\r\n    client_email: '',\r\n    project_description: ''\r\n  });\r\n\r\n  // ✅ NUEVO: Estados para selección inteligente de cotizaciones\r\n  const [myQuotes, setMyQuotes] = useState([]);\r\n  const [loadingQuotes, setLoadingQuotes] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    // ✅ NUEVO: Cargar cotizaciones del vendedor\r\n    if (user.role === 'vendedor_comercial' || user.role === 'jefa_comercial') {\r\n      fetchMyQuotes();\r\n    }\r\n  }, []);\r\n\r\n  // ✅ NUEVO: Función para cargar cotizaciones del vendedor\r\n  const fetchMyQuotes = async () => {\r\n    try {\r\n      setLoadingQuotes(true);\r\n      const quotes = await api('/api/quotes/my-quotes');\r\n      setMyQuotes(quotes || []);\r\n      console.log('📋 Cotizaciones cargadas:', quotes?.length || 0);\r\n    } catch (err) {\r\n      console.error('Error fetching quotes:', err);\r\n      setError('Error al cargar las cotizaciones: ' + (err.message || 'Error desconocido'));\r\n    } finally {\r\n      setLoadingQuotes(false);\r\n    }\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      if (user.role === 'facturacion' || user.role === 'admin') {\r\n        // Para facturación: ver todos los comprobantes\r\n        const [pendingData, approvedData, archivedData] = await Promise.all([\r\n          api('/api/payment-proofs/pending'),\r\n          api('/api/payment-proofs/approved'),\r\n          api('/api/payment-proofs/archived')\r\n        ]);\r\n\r\n        setPendingProofs(pendingData || []);\r\n        setApprovedProofs(approvedData || []);\r\n        setArchivedProofs(archivedData || []);\r\n      } else if (user.role === 'vendedor_comercial' || user.role === 'jefa_comercial') {\r\n        // Para vendedores: ver sus propios envíos\r\n        const myData = await api('/api/payment-proofs/my-submissions');\r\n        setMySubmissions(myData || []);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching data:', err);\r\n      setError('Error al cargar los datos: ' + (err.message || 'Error desconocido'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      setUploadForm({ ...uploadForm, payment_proof: file });\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    try {\r\n      setUploading(true);\r\n      setError(null);\r\n\r\n      const formData = new FormData();\r\n      formData.append('quote_id', uploadForm.quote_id);\r\n      formData.append('description', uploadForm.description);\r\n      formData.append('amount_paid', uploadForm.amount_paid);\r\n      formData.append('payment_date', uploadForm.payment_date);\r\n      formData.append('payment_method', uploadForm.payment_method);\r\n      formData.append('payment_proof', uploadForm.payment_proof);\r\n\r\n      await api('/api/payment-proofs/upload', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n\r\n      setShowUploadModal(false);\r\n      setUploadForm({\r\n        quote_id: '',\r\n        description: '',\r\n        amount_paid: '',\r\n        payment_date: '',\r\n        payment_method: '',\r\n        payment_proof: null\r\n      });\r\n      fetchData();\r\n    } catch (err) {\r\n      console.error('Error uploading proof:', err);\r\n      setError('Error al subir el comprobante: ' + (err.message || 'Error desconocido'));\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const handleApprove = async () => {\r\n    try {\r\n      // 1. Aprobar el comprobante de pago\r\n      await api('/api/payment-proofs/approve', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ \r\n          proofId: selectedProof.id, \r\n          notes: approvalNotes \r\n        })\r\n      });\r\n\r\n      // 2. ✅ NUEVO: Alimentar el embudo de ventas\r\n      if (selectedProof.quote_id && realAmountPaid) {\r\n        try {\r\n          console.log('🍯 Alimentando embudo de ventas...', {\r\n            quoteId: selectedProof.quote_id,\r\n            realAmountPaid: parseFloat(realAmountPaid)\r\n          });\r\n\r\n          const embudoResponse = await api('/api/funnel/alimentar-embudo', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              quoteId: selectedProof.quote_id,\r\n              realAmountPaid: parseFloat(realAmountPaid)\r\n            })\r\n          });\r\n\r\n          console.log('✅ Embudo alimentado exitosamente:', embudoResponse);\r\n          \r\n          // Mostrar mensaje de éxito\r\n          alert(`✅ Comprobante aprobado y embudo alimentado exitosamente!\\n📊 Procesados: ${embudoResponse.itemsProcessed} ítems\\n🏷️ Categoría: ${embudoResponse.category}\\n📋 Código: ${embudoResponse.quoteCode}`);\r\n          \r\n        } catch (embudoError) {\r\n          console.error('❌ Error alimentando embudo:', embudoError);\r\n          alert('⚠️ Comprobante aprobado pero hubo un error alimentando el embudo. Contacta al administrador.');\r\n        }\r\n      } else {\r\n        console.warn('⚠️ No se pudo alimentar el embudo: quote_id o realAmountPaid faltante');\r\n        alert('✅ Comprobante aprobado (embudo no alimentado - datos faltantes)');\r\n      }\r\n      \r\n      fetchData();\r\n      setShowApprovalModal(false);\r\n      setApprovalNotes('');\r\n      setRealAmountPaid('');\r\n    } catch (err) {\r\n      console.error('Error approving proof:', err);\r\n      setError('Error al aprobar el comprobante: ' + (err.message || 'Error desconocido'));\r\n    }\r\n  };\r\n\r\n  const handleReject = async () => {\r\n    try {\r\n      await api('/api/payment-proofs/reject', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ \r\n          proofId: selectedProof.id, \r\n          reason: rejectionReason \r\n        })\r\n      });\r\n      \r\n      fetchData();\r\n      setShowRejectionModal(false);\r\n      setRejectionReason('');\r\n    } catch (err) {\r\n      console.error('Error rejecting proof:', err);\r\n      setError('Error al rechazar el comprobante: ' + (err.message || 'Error desconocido'));\r\n    }\r\n  };\r\n\r\n  const handleDownload = async (proofId) => {\r\n    try {\r\n      // Obtener información del comprobante\r\n      const proofData = await api(`/api/payment-proofs/${proofId}`);\r\n      const proof = proofData.data || proofData;\r\n      \r\n      if (!proof) {\r\n        setError('No se encontró el comprobante');\r\n        return;\r\n      }\r\n\r\n      // Crear modal para seleccionar qué descargar\r\n      setSelectedProof(proof);\r\n      setShowDownloadModal(true);\r\n      \r\n    } catch (err) {\r\n      console.error('Error getting proof data:', err);\r\n      setError('Error al obtener información del comprobante: ' + (err.message || 'Error desconocido'));\r\n    }\r\n  };\r\n\r\n  // Función para descargar archivo específico\r\n  const downloadFile = async (filePath, fileName, fileType = 'attachment') => {\r\n    try {\r\n      const response = await fetch(`/api/payment-proofs/download-file?path=${encodeURIComponent(filePath)}&type=${fileType}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n        document.body.removeChild(a);\r\n      } else {\r\n        setError('Error al descargar el archivo');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error downloading file:', err);\r\n      setError('Error al descargar el archivo: ' + (err.message || 'Error desconocido'));\r\n    }\r\n  };\r\n\r\n\r\n  // Función para manejar la expansión de descripciones\r\n  const toggleDescription = (proofId) => {\r\n    const newExpanded = new Set(expandedDescriptions);\r\n    if (newExpanded.has(proofId)) {\r\n      newExpanded.delete(proofId);\r\n    } else {\r\n      newExpanded.add(proofId);\r\n    }\r\n    setExpandedDescriptions(newExpanded);\r\n  };\r\n\r\n  // Función para truncar texto\r\n  const truncateText = (text, maxLength = 100) => {\r\n    if (!text) return '';\r\n    if (text.length <= maxLength) return text;\r\n    return text.substring(0, maxLength) + '...';\r\n  };\r\n\r\n  // Función para archivar comprobante\r\n  const handleArchive = async (proofId) => {\r\n    if (window.confirm('¿Estás seguro de que quieres archivar este comprobante? Se moverá al archivo y no aparecerá en la lista principal.')) {\r\n      try {\r\n        // Marcar como procesando\r\n        setArchivingProofs(prev => new Set([...prev, proofId]));\r\n        \r\n        const response = await api(`/api/payment-proofs/${proofId}/archive`, {\r\n          method: 'PUT'\r\n        });\r\n        \r\n        // Actualizar estado local inmediatamente\r\n        const proofToArchive = approvedProofs.find(proof => proof.id === proofId);\r\n        if (proofToArchive) {\r\n          // Remover de comprobantes aprobados\r\n          setApprovedProofs(prev => prev.filter(proof => proof.id !== proofId));\r\n          \r\n          // Agregar a comprobantes archivados con datos actualizados\r\n          const archivedProof = {\r\n            ...proofToArchive,\r\n            archived: true,\r\n            archived_at: new Date().toISOString(),\r\n            archived_by_name: user.name\r\n          };\r\n          setArchivedProofs(prev => [archivedProof, ...prev]);\r\n        }\r\n        \r\n        setSuccess('Comprobante archivado exitosamente');\r\n      } catch (err) {\r\n        console.error('Error archiving proof:', err);\r\n        setError('Error al archivar el comprobante: ' + (err.message || 'Error desconocido'));\r\n      } finally {\r\n        // Remover del estado de procesando\r\n        setArchivingProofs(prev => {\r\n          const newSet = new Set(prev);\r\n          newSet.delete(proofId);\r\n          return newSet;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Función para desarchivar comprobante\r\n  const handleUnarchive = async (proofId) => {\r\n    if (window.confirm('¿Estás seguro de que quieres desarchivar este comprobante? Volverá a aparecer en la lista de comprobantes aprobados.')) {\r\n      try {\r\n        // Marcar como procesando\r\n        setArchivingProofs(prev => new Set([...prev, proofId]));\r\n        \r\n        const response = await api(`/api/payment-proofs/${proofId}/unarchive`, {\r\n          method: 'PUT'\r\n        });\r\n        \r\n        // Actualizar estado local inmediatamente\r\n        const proofToUnarchive = archivedProofs.find(proof => proof.id === proofId);\r\n        if (proofToUnarchive) {\r\n          // Remover de comprobantes archivados\r\n          setArchivedProofs(prev => prev.filter(proof => proof.id !== proofId));\r\n          \r\n          // Agregar a comprobantes aprobados con datos actualizados\r\n          const unarchivedProof = {\r\n            ...proofToUnarchive,\r\n            archived: false,\r\n            archived_at: null,\r\n            archived_by_name: null\r\n          };\r\n          setApprovedProofs(prev => [unarchivedProof, ...prev]);\r\n        }\r\n        \r\n        setSuccess('Comprobante desarchivado exitosamente');\r\n      } catch (err) {\r\n        console.error('Error unarchiving proof:', err);\r\n        setError('Error al desarchivar el comprobante: ' + (err.message || 'Error desconocido'));\r\n      } finally {\r\n        // Remover del estado de procesando\r\n        setArchivingProofs(prev => {\r\n          const newSet = new Set(prev);\r\n          newSet.delete(proofId);\r\n          return newSet;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '400px' }}>\r\n        <Spinner animation=\"border\" />\r\n        <div className=\"ms-3\">\r\n          <p>Cargando comprobantes de pago...</p>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <h2>💳 Sistema de Comprobantes de Pago</h2>\r\n          <p className=\"text-muted\">\r\n            {user.role === 'facturacion' || user.role === 'admin' \r\n              ? 'Revisar y aprobar comprobantes de pago enviados por vendedores'\r\n              : 'Enviar cotizaciones, comprobantes de pago y archivos del proyecto'\r\n            }\r\n          </p>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          {(user.role === 'vendedor_comercial' || user.role === 'jefa_comercial') && (\r\n            <Button variant=\"success\" onClick={() => setShowUploadModal(true)} className=\"me-2\">\r\n              <FiUpload className=\"me-2\" />\r\n              Subir Comprobante\r\n            </Button>\r\n          )}\r\n          <Button variant=\"outline-primary\" onClick={fetchData}>\r\n            <FiRefreshCw className=\"me-2\" />\r\n            Actualizar\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      {error && (\r\n        <Alert variant=\"danger\" dismissible onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      <Row>\r\n        {/* Para Vendedores: Mis Envíos */}\r\n        {(user.role === 'vendedor_comercial' || user.role === 'jefa_comercial') && (\r\n          <Col lg={12} className=\"mb-4\">\r\n            <Card>\r\n              <Card.Header>\r\n                <h5 className=\"mb-0\">\r\n                  <FiFileText className=\"me-2\" />\r\n                  Mis Envíos ({mySubmissions.length})\r\n                </h5>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {mySubmissions.length === 0 ? (\r\n                  <div className=\"text-center py-4\">\r\n                    <p className=\"text-muted\">No has enviado ningún comprobante aún</p>\r\n                    <Button variant=\"success\" onClick={() => setShowUploadModal(true)}>\r\n                      <FiUpload className=\"me-2\" />\r\n                      Subir Primer Comprobante\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"list-group list-group-flush\">\r\n                    {mySubmissions.map((submission) => (\r\n                      <div key={submission.id} className=\"list-group-item\">\r\n                        <div className=\"d-flex justify-content-between align-items-start\">\r\n                          <div>\r\n                            <h6 className=\"mb-1\">Cotización: {submission.quote_number}</h6>\r\n                            <p className=\"mb-1 text-muted\">\r\n                              <strong>Cliente:</strong> {submission.client_name}<br/>\r\n                              <strong>Monto:</strong> ${submission.amount_paid?.toLocaleString()}<br/>\r\n                              <strong>Estado:</strong> \r\n                              <Badge bg={submission.status === 'approved' ? 'success' : submission.status === 'rejected' ? 'danger' : 'warning'} className=\"ms-2\">\r\n                                {submission.status === 'approved' ? 'Aprobado' : \r\n                                 submission.status === 'rejected' ? 'Rechazado' : 'Pendiente'}\r\n                              </Badge>\r\n                              {submission.status === 'rejected' && submission.rejection_reason && (\r\n                                <div className=\"mt-2\">\r\n                                  <strong className=\"text-danger\">Motivo del rechazo:</strong>\r\n                                  <div className=\"text-danger small mt-1\">\r\n                                    {submission.rejection_reason}\r\n                                  </div>\r\n                                </div>\r\n                              )}\r\n                            </p>\r\n                            <small className=\"text-muted\">\r\n                              Enviado: {new Date(submission.created_at).toLocaleDateString()}\r\n                            </small>\r\n                          </div>\r\n                          <div className=\"d-flex flex-column gap-2\">\r\n                            <Button \r\n                              variant=\"outline-primary\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDownload(submission.id)}\r\n                            >\r\n                              <FiDownload className=\"me-1\" />\r\n                              Ver\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        )}\r\n\r\n        {/* Para Facturación: Comprobantes Pendientes */}\r\n        {(user.role === 'facturacion' || user.role === 'admin') && (\r\n          <Col lg={6}>\r\n            <Card>\r\n              <Card.Header>\r\n                <h5 className=\"mb-0\">\r\n                  <FiFileText className=\"me-2\" />\r\n                  Comprobantes Pendientes ({pendingProofs.length})\r\n                </h5>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {pendingProofs.length === 0 ? (\r\n                  <p className=\"text-muted text-center\">No hay comprobantes pendientes</p>\r\n                ) : (\r\n                  <div className=\"list-group list-group-flush\">\r\n                    {pendingProofs.map((proof) => (\r\n                      <div key={proof.id} className=\"list-group-item\">\r\n                        <div className=\"d-flex justify-content-between align-items-start\">\r\n                          <div>\r\n                            <h6 className=\"mb-1\">Cotización: {proof.quote_number}</h6>\r\n                            <p className=\"mb-1 text-muted\">\r\n                              <strong>Empresa:</strong> {proof.company_name}<br/>\r\n                              <strong>Monto:</strong> ${proof.amount_paid?.toLocaleString()}<br/>\r\n                              <strong>Método:</strong> {proof.payment_method}<br/>\r\n                              <strong>Fecha:</strong> {new Date(proof.payment_date).toLocaleDateString()}<br/>\r\n                              <strong>Subido por:</strong> {proof.uploaded_by_name}\r\n                            </p>\r\n                            <div className=\"mt-2\">\r\n                              <strong>Archivos adjuntos:</strong>\r\n                              <div className=\"d-flex flex-wrap gap-2 mt-1\">\r\n                                <Badge bg=\"primary\" className=\"d-flex align-items-center\">\r\n                                  <FiFileText className=\"me-1\" />\r\n                                  Comprobante\r\n                                </Badge>\r\n                                {proof.quote_file_name && (\r\n                                  <Badge bg=\"info\" className=\"d-flex align-items-center\">\r\n                                    <FiFileText className=\"me-1\" />\r\n                                    Cotización\r\n                                  </Badge>\r\n                                )}\r\n                                {proof.project_name && (\r\n                                  <Badge bg=\"success\" className=\"d-flex align-items-center\">\r\n                                    <FiHome className=\"me-1\" />\r\n                                    {proof.project_name}\r\n                                  </Badge>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                            {proof.description && (\r\n                              <div className=\"mb-1 text-muted\">\r\n                                <strong>Descripción:</strong> \r\n                                <div className=\"mt-1\">\r\n                                  {expandedDescriptions.has(proof.id) ? (\r\n                                    <div>\r\n                                      <div className=\"text-break\" style={{ wordBreak: 'break-word' }}>\r\n                                        {proof.description}\r\n                                      </div>\r\n                                      <Button \r\n                                        variant=\"link\" \r\n                                        size=\"sm\" \r\n                                        className=\"p-0 text-primary\"\r\n                                        onClick={() => toggleDescription(proof.id)}\r\n                                      >\r\n                                        Ver menos\r\n                                      </Button>\r\n                                    </div>\r\n                                  ) : (\r\n                                    <div>\r\n                                      <div className=\"text-break\" style={{ wordBreak: 'break-word' }}>\r\n                                        {truncateText(proof.description, 150)}\r\n                                      </div>\r\n                                      {proof.description.length > 150 && (\r\n                                        <Button \r\n                                          variant=\"link\" \r\n                                          size=\"sm\" \r\n                                          className=\"p-0 text-primary\"\r\n                                          onClick={() => toggleDescription(proof.id)}\r\n                                        >\r\n                                          Ver descripción completa\r\n                                        </Button>\r\n                                      )}\r\n                                    </div>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <div className=\"d-flex flex-column gap-2\">\r\n                            <Button \r\n                              variant=\"outline-primary\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDownload(proof.id)}\r\n                            >\r\n                              <FiDownload className=\"me-1\" />\r\n                              Ver\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"success\" \r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                setSelectedProof(proof);\r\n                                setShowApprovalModal(true);\r\n                              }}\r\n                            >\r\n                              <FiCheck className=\"me-1\" />\r\n                              Aprobar\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"danger\" \r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                setSelectedProof(proof);\r\n                                setShowRejectionModal(true);\r\n                              }}\r\n                            >\r\n                              <FiX className=\"me-1\" />\r\n                              Rechazar\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        )}\r\n\r\n        {/* Comprobantes Aprobados */}\r\n        {(user.role === 'facturacion' || user.role === 'admin') && (\r\n          <Col lg={6}>\r\n            <Card>\r\n              <Card.Header>\r\n                <h5 className=\"mb-0\">\r\n                  <FiCheck className=\"me-2\" />\r\n                  Comprobantes Aprobados ({approvedProofs.length})\r\n                </h5>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {approvedProofs.length === 0 ? (\r\n                  <p className=\"text-muted text-center\">No hay comprobantes aprobados</p>\r\n                ) : (\r\n                  <div className=\"list-group list-group-flush\">\r\n                    {approvedProofs.map((proof) => (\r\n                      <div key={proof.id} className=\"list-group-item\">\r\n                        <div className=\"d-flex justify-content-between align-items-start\">\r\n                          <div>\r\n                            <h6 className=\"mb-1\">Cotización: {proof.quote_number}</h6>\r\n                            <p className=\"mb-1 text-muted\">\r\n                              <strong>Empresa:</strong> {proof.company_name}<br/>\r\n                              <strong>Monto:</strong> ${proof.amount_paid?.toLocaleString()}<br/>\r\n                              <strong>Método:</strong> {proof.payment_method}<br/>\r\n                              <strong>Fecha de pago:</strong> {new Date(proof.payment_date).toLocaleDateString()}<br/>\r\n                              <strong>Aprobado por:</strong> {proof.approved_by_name}<br/>\r\n                              <strong>Fecha de aprobación:</strong> {new Date(proof.approved_at).toLocaleDateString()}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"d-flex flex-column gap-2\">\r\n                            <Button \r\n                              variant=\"outline-primary\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDownload(proof.id)}\r\n                            >\r\n                              <FiDownload className=\"me-1\" />\r\n                              Descargar\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"outline-warning\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleArchive(proof.id)}\r\n                              disabled={archivingProofs.has(proof.id)}\r\n                            >\r\n                              {archivingProofs.has(proof.id) ? (\r\n                                <>\r\n                                  <Spinner animation=\"border\" size=\"sm\" className=\"me-1\" />\r\n                                  Archivando...\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <FiArchive className=\"me-1\" />\r\n                                  Archivar\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n\r\n      {/* Comprobantes Archivados */}\r\n      {(user.role === 'facturacion' || user.role === 'admin') && (\r\n        <Row className=\"mt-4\">\r\n          <Col>\r\n            <Card>\r\n              <Card.Header>\r\n                <h5 className=\"mb-0\">\r\n                  <FiArchive className=\"me-2\" />\r\n                  Comprobantes Archivados ({archivedProofs.length})\r\n                </h5>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {archivedProofs.length === 0 ? (\r\n                  <p className=\"text-muted text-center\">No hay comprobantes archivados</p>\r\n                ) : (\r\n                  <div className=\"list-group list-group-flush\">\r\n                    {archivedProofs.map((proof) => (\r\n                      <div key={proof.id} className=\"list-group-item\">\r\n                        <div className=\"d-flex justify-content-between align-items-start\">\r\n                          <div>\r\n                            <h6 className=\"mb-1\">Cotización: {proof.quote_number}</h6>\r\n                            <p className=\"mb-1 text-muted\">\r\n                              <strong>Empresa:</strong> {proof.company_name}<br/>\r\n                              <strong>Monto:</strong> ${proof.amount_paid?.toLocaleString()}<br/>\r\n                              <strong>Método:</strong> {proof.payment_method}<br/>\r\n                              <strong>Fecha de pago:</strong> {new Date(proof.payment_date).toLocaleDateString()}<br/>\r\n                              <strong>Archivado por:</strong> {proof.archived_by_name}<br/>\r\n                              <strong>Fecha de archivado:</strong> {new Date(proof.archived_at).toLocaleDateString()}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"d-flex flex-column gap-2\">\r\n                            <Button \r\n                              variant=\"outline-primary\" \r\n                              size=\"sm\"\r\n                              onClick={() => handleDownload(proof.id)}\r\n                            >\r\n                              <FiDownload className=\"me-1\" />\r\n                              Descargar\r\n                            </Button>\r\n                              <Button \r\n                                variant=\"outline-success\" \r\n                                size=\"sm\"\r\n                                onClick={() => handleUnarchive(proof.id)}\r\n                                disabled={archivingProofs.has(proof.id)}\r\n                              >\r\n                                {archivingProofs.has(proof.id) ? (\r\n                                  <>\r\n                                    <Spinner animation=\"border\" size=\"sm\" className=\"me-1\" />\r\n                                    Desarchivando...\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <FiRefreshCw className=\"me-1\" />\r\n                                    Desarchivar\r\n                                  </>\r\n                                )}\r\n                              </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      {/* Modal de Subida */}\r\n      <Modal show={showUploadModal} onHide={() => setShowUploadModal(false)} size=\"lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Subir Comprobante de Pago</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Seleccionar Cotización *</Form.Label>\r\n              <Form.Select\r\n                value={uploadForm.quote_id}\r\n                onChange={(e) => {\r\n                  const selectedQuote = myQuotes.find(q => q.id === parseInt(e.target.value));\r\n                  setUploadForm({ \r\n                    ...uploadForm, \r\n                    quote_id: e.target.value,\r\n                    client_name: selectedQuote?.company_name || '',\r\n                    client_email: selectedQuote?.client_email || ''\r\n                  });\r\n                }}\r\n                required\r\n                disabled={loadingQuotes}\r\n              >\r\n                <option value=\"\">\r\n                  {loadingQuotes ? 'Cargando cotizaciones...' : 'Seleccione una cotización'}\r\n                </option>\r\n                {myQuotes.map(quote => (\r\n                  <option key={quote.id} value={quote.id}>\r\n                    {quote.quote_code || `COT-${quote.id}`} - {quote.company_name} - S/ {quote.total?.toLocaleString() || '0.00'}\r\n                  </option>\r\n                ))}\r\n              </Form.Select>\r\n              {myQuotes.length === 0 && !loadingQuotes && (\r\n                <Form.Text className=\"text-warning\">\r\n                  No tienes cotizaciones disponibles. Crea una cotización primero.\r\n                </Form.Text>\r\n              )}\r\n            </Form.Group>\r\n\r\n            {/* ✅ NUEVO: Mostrar información de la cotización seleccionada */}\r\n            {uploadForm.quote_id && (\r\n              <div className=\"mb-3 p-3 bg-light rounded\">\r\n                <h6 className=\"text-primary mb-2\">📋 Información de la Cotización</h6>\r\n                {(() => {\r\n                  const selectedQuote = myQuotes.find(q => q.id === parseInt(uploadForm.quote_id));\r\n                  return selectedQuote ? (\r\n                    <div>\r\n                      <p className=\"mb-1\"><strong>Código:</strong> {selectedQuote.quote_code || `COT-${selectedQuote.id}`}</p>\r\n                      <p className=\"mb-1\"><strong>Cliente:</strong> {selectedQuote.company_name}</p>\r\n                      <p className=\"mb-1\"><strong>Total:</strong> S/ {selectedQuote.total?.toLocaleString() || '0.00'}</p>\r\n                      <p className=\"mb-1\"><strong>Categoría:</strong> \r\n                        <span className={`badge ms-2 ${selectedQuote.category_main === 'laboratorio' ? 'bg-info' : 'bg-warning'}`}>\r\n                          {selectedQuote.category_main === 'laboratorio' ? '🧪 Laboratorio' : '⚙️ Ingeniería'}\r\n                        </span>\r\n                      </p>\r\n                      <p className=\"mb-0\"><strong>Estado:</strong> \r\n                        <span className={`badge ms-2 ${selectedQuote.status === 'borrador' ? 'bg-secondary' : 'bg-success'}`}>\r\n                          {selectedQuote.status === 'borrador' ? 'Borrador' : 'Aprobada'}\r\n                        </span>\r\n                      </p>\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-muted\">Cargando información...</p>\r\n                  );\r\n                })()}\r\n              </div>\r\n            )}\r\n            \r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Monto Pagado *</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={uploadForm.amount_paid}\r\n                onChange={(e) => setUploadForm({ ...uploadForm, amount_paid: e.target.value })}\r\n                placeholder=\"0.00\"\r\n                required\r\n              />\r\n            </Form.Group>\r\n            \r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Fecha de Pago *</Form.Label>\r\n              <Form.Control\r\n                type=\"date\"\r\n                value={uploadForm.payment_date}\r\n                onChange={(e) => setUploadForm({ ...uploadForm, payment_date: e.target.value })}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            \r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Método de Pago *</Form.Label>\r\n              <Form.Select\r\n                value={uploadForm.payment_method}\r\n                onChange={(e) => setUploadForm({ ...uploadForm, payment_method: e.target.value })}\r\n                required\r\n              >\r\n                <option value=\"\">Seleccione método</option>\r\n                <option value=\"Transferencia bancaria\">Transferencia bancaria</option>\r\n                <option value=\"Depósito bancario\">Depósito bancario</option>\r\n                <option value=\"Efectivo\">Efectivo</option>\r\n                <option value=\"Cheque\">Cheque</option>\r\n                <option value=\"Tarjeta de crédito\">Tarjeta de crédito</option>\r\n                <option value=\"Otro\">Otro</option>\r\n              </Form.Select>\r\n            </Form.Group>\r\n            \r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Descripción</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={uploadForm.description}\r\n                onChange={(e) => setUploadForm({ ...uploadForm, description: e.target.value })}\r\n                placeholder=\"Descripción adicional del pago...\"\r\n              />\r\n            </Form.Group>\r\n            \r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Comprobante de Pago *</Form.Label>\r\n              <Form.Control\r\n                type=\"file\"\r\n                accept=\"image/*,.pdf,.doc,.docx\"\r\n                onChange={handleFileUpload}\r\n                required\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Formatos permitidos: JPG, PNG, PDF, DOC, DOCX (máximo 10MB)\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowUploadModal(false)}>\r\n            Cancelar\r\n          </Button>\r\n          <Button \r\n            variant=\"primary\" \r\n            onClick={handleUpload}\r\n            disabled={uploading || !uploadForm.quote_id || !uploadForm.amount_paid || !uploadForm.payment_date || !uploadForm.payment_method || !uploadForm.payment_proof}\r\n          >\r\n            {uploading ? <Spinner size=\"sm\" className=\"me-2\" /> : <FiUpload className=\"me-1\" />}\r\n            {uploading ? 'Subiendo...' : 'Subir Comprobante'}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Modal de Aprobación */}\r\n      <Modal show={showApprovalModal} onHide={() => setShowApprovalModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirmar Aprobación</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>¿Está seguro de que desea aprobar el comprobante de pago?</p>\r\n          <p><strong>Cotización:</strong> {selectedProof?.quote_number}</p>\r\n          <p><strong>Monto Reportado:</strong> S/ {selectedProof?.amount_paid?.toLocaleString()}</p>\r\n          \r\n          {/* ✅ NUEVO: Campo para monto real pagado */}\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Monto Real Pagado por el Cliente *</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              value={realAmountPaid}\r\n              onChange={(e) => setRealAmountPaid(e.target.value)}\r\n              placeholder=\"Ingrese el monto real pagado por el cliente\"\r\n              required\r\n            />\r\n            <Form.Text className=\"text-muted\">\r\n              Este monto se usará para alimentar el embudo de ventas y análisis de métricas.\r\n            </Form.Text>\r\n          </Form.Group>\r\n\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Notas de aprobación:</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              value={approvalNotes}\r\n              onChange={(e) => setApprovalNotes(e.target.value)}\r\n              placeholder=\"Notas adicionales sobre la aprobación...\"\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowApprovalModal(false)}>\r\n            Cancelar\r\n          </Button>\r\n          <Button \r\n            variant=\"success\" \r\n            onClick={handleApprove}\r\n            disabled={!realAmountPaid || parseFloat(realAmountPaid) <= 0}\r\n          >\r\n            <FiCheck className=\"me-1\" />\r\n            Aprobar y Alimentar Embudo\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Modal de Rechazo */}\r\n      <Modal show={showRejectionModal} onHide={() => setShowRejectionModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Rechazar Comprobante</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>¿Está seguro de que desea rechazar el comprobante de pago?</p>\r\n          <p><strong>Cotización:</strong> {selectedProof?.quote_number}</p>\r\n          <Form.Group className=\"mb-3\">\r\n            <Form.Label>Motivo del rechazo:</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={3}\r\n              value={rejectionReason}\r\n              onChange={(e) => setRejectionReason(e.target.value)}\r\n              placeholder=\"Ingrese el motivo del rechazo...\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowRejectionModal(false)}>\r\n            Cancelar\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={handleReject} disabled={!rejectionReason.trim()}>\r\n            <FiX className=\"me-1\" />\r\n            Rechazar\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Modal de Descarga */}\r\n      <Modal show={showDownloadModal} onHide={() => setShowDownloadModal(false)} size=\"lg\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            <FiDownload className=\"me-2\" />\r\n            Descargar Archivos\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {selectedProof && (\r\n            <div>\r\n              <div className=\"mb-4\">\r\n                <h6>Información del Comprobante</h6>\r\n                <p><strong>Cotización:</strong> {selectedProof.quote_number}</p>\r\n                <p><strong>Empresa:</strong> {selectedProof.company_name}</p>\r\n                <p><strong>Monto:</strong> ${selectedProof.amount_paid?.toLocaleString()}</p>\r\n                <p><strong>Fecha:</strong> {new Date(selectedProof.created_at).toLocaleDateString()}</p>\r\n              </div>\r\n\r\n              <div className=\"mb-4\">\r\n                <h6>Documentos Disponibles</h6>\r\n                \r\n                {/* Sección de Comprobante de Pago */}\r\n                <div className=\"mb-3\">\r\n                  <h6 className=\"text-primary mb-2\">\r\n                    <FiDollarSign className=\"me-2\" />\r\n                    Comprobante de Pago\r\n                  </h6>\r\n                  {selectedProof.file_path ? (\r\n                    <Button \r\n                      variant=\"primary\" \r\n                      onClick={() => downloadFile(selectedProof.file_path, selectedProof.file_name || `comprobante-${selectedProof.id}.pdf`, 'payment_proof')}\r\n                      className=\"d-flex align-items-center justify-content-between w-100\"\r\n                    >\r\n                      <span>\r\n                        <FiFileText className=\"me-2\" />\r\n                        Descargar Comprobante de Pago\r\n                      </span>\r\n                      <FiDownload />\r\n                    </Button>\r\n                  ) : (\r\n                    <Alert variant=\"warning\" className=\"mb-0\">\r\n                      <FiFileText className=\"me-2\" />\r\n                      No hay comprobante de pago disponible\r\n                    </Alert>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Sección de Cotización */}\r\n                <div className=\"mb-3\">\r\n                  <h6 className=\"text-success mb-2\">\r\n                    <FiFileText className=\"me-2\" />\r\n                    Cotización\r\n                  </h6>\r\n                  <div className=\"d-grid gap-2\">\r\n                    {/* Cotización Original (si existe archivo adjunto) */}\r\n                    {selectedProof.quote_file_path && (\r\n                      <Button \r\n                        variant=\"outline-secondary\" \r\n                        onClick={() => downloadFile(selectedProof.quote_file_path, `cotizacion-original-${selectedProof.id}.pdf`, 'quote_file')}\r\n                        className=\"d-flex align-items-center justify-content-between\"\r\n                      >\r\n                        <span>\r\n                          <FiFileText className=\"me-2\" />\r\n                          Cotización Original (Archivo Adjunto)\r\n                        </span>\r\n                        <FiDownload />\r\n                      </Button>\r\n                    )}\r\n\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Archivos del Proyecto */}\r\n                {selectedProof.project_files && selectedProof.project_files.length > 0 && (\r\n                  <div className=\"mb-3\">\r\n                    <h6 className=\"text-info mb-2\">\r\n                      <FiHome className=\"me-2\" />\r\n                      Archivos del Proyecto\r\n                    </h6>\r\n                    <div className=\"d-grid gap-1\">\r\n                      {selectedProof.project_files.map((file, index) => (\r\n                        <Button \r\n                          key={index}\r\n                          variant=\"outline-info\" \r\n                          size=\"sm\"\r\n                          onClick={() => downloadFile(file.path, file.name, 'project_file')}\r\n                          className=\"d-flex align-items-center justify-content-between\"\r\n                        >\r\n                          <span>\r\n                            <FiHome className=\"me-2\" />\r\n                            {file.name}\r\n                          </span>\r\n                          <FiDownload />\r\n                        </Button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {(!selectedProof.payment_proof_path && !selectedProof.quote_file_path && (!selectedProof.project_files || selectedProof.project_files.length === 0)) && (\r\n                <Alert variant=\"warning\">\r\n                  <FiFileText className=\"me-2\" />\r\n                  No hay archivos adjuntos disponibles para este comprobante.\r\n                </Alert>\r\n              )}\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowDownloadModal(false)}>\r\n            Cerrar\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ComprobantesPago;\r\n\r\n// "],"names":["ComprobantesPago","user","useAuth","pendingProofs","setPendingProofs","useState","approvedProofs","setApprovedProofs","archivedProofs","setArchivedProofs","mySubmissions","setMySubmissions","loading","setLoading","error","setError","success","setSuccess","showUploadModal","setShowUploadModal","showApprovalModal","setShowApprovalModal","showRejectionModal","setShowRejectionModal","showDownloadModal","setShowDownloadModal","selectedProof","setSelectedProof","uploading","setUploading","rejectionReason","setRejectionReason","approvalNotes","setApprovalNotes","realAmountPaid","setRealAmountPaid","expandedDescriptions","setExpandedDescriptions","archivingProofs","setArchivingProofs","uploadForm","setUploadForm","myQuotes","setMyQuotes","loadingQuotes","setLoadingQuotes","useEffect","fetchData","fetchMyQuotes","quotes","api","err","pendingData","approvedData","archivedData","myData","handleFileUpload","event","file","handleUpload","formData","handleApprove","embudoResponse","embudoError","handleReject","handleDownload","proofId","proofData","proof","downloadFile","filePath","fileName","fileType","response","blob","url","a","toggleDescription","newExpanded","truncateText","text","maxLength","handleArchive","prev","proofToArchive","archivedProof","newSet","handleUnarchive","proofToUnarchive","unarchivedProof","jsxs","Container","jsx","Spinner","Row","Col","Button","FiUpload","FiRefreshCw","Alert","Card","FiFileText","submission","_a","Badge","FiDownload","FiHome","FiCheck","FiX","Fragment","FiArchive","Modal","Form","e","selectedQuote","q","quote","_b","FiDollarSign","index"],"mappings":"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"}