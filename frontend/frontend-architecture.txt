# Documentación de arquitectura y stack del frontend CRMGeoFal

## Stack principal
- React 18 (Vite o Create React App)
- React Router DOM (ruteo)
- Context API (gestión de autenticación y usuario)
- Axios (consumo de API REST)
- Prettier y ESLint (formato y calidad de código)
- Bootstrap o Material UI (UI, a definir)

## Estructura de carpetas sugerida
- src/
  - components/   # Componentes reutilizables (formularios, tablas, cards, etc)
  - pages/        # Vistas principales (Login, Dashboard, Leads, Tickets, Proyectos, etc)
  - contexts/     # Contextos globales (AuthContext, UserContext)
  - services/     # Lógica de consumo de API (api.js, authService.js, leadService.js, etc)
  - hooks/        # Custom hooks (useAuth, useFetch, etc)
  - utils/        # Utilidades generales
  - App.js        # Componente raíz
  - index.js      # Entry point


## Relación de módulos backend ↔ frontend

| Módulo Frontend      | Endpoint/API Backend                | Descripción breve                         |
|----------------------|-------------------------------------|-------------------------------------------|
| Autenticación        | /api/auth/login, /api/users         | Login, registro, gestión de usuarios      |
| Dashboard            | /api/reports/dashboard              | KPIs, métricas, accesos rápidos           |
| Leads                | /api/leads, /api/companies          | Gestión de leads y empresas               |
| Proyectos            | /api/projects, /api/project-history | Gestión de proyectos e historial          |
| Tickets              | /api/tickets, /api/ticket-history   | Soporte, seguimiento, adjuntos            |
| Facturación          | /api/invoices                       | Facturas, pagos, exportación              |
| Evidencias           | /api/evidences                      | Subida y consulta de archivos             |
| Reportes             | /api/reports, /api/export           | Exportes Excel/PDF, reportes avanzados    |
| Auditoría            | /api/audit                          | Logs críticos, solo admin/jefes           |

Cada módulo frontend consume los endpoints REST correspondientes, usando servicios en `src/services/` y componentes/páginas en `src/pages/` y `src/components/`.

## Seguridad y buenas prácticas
- Protección de rutas por rol
- Manejo de tokens JWT en localStorage/Context
- Manejo de errores y feedback al usuario
- Validación de formularios
- Código modular y reutilizable

## Notas
- El frontend consumirá la API REST documentada en Swagger/OpenAPI.
- Se recomienda usar hooks y componentes funcionales.
- El diseño puede adaptarse a Bootstrap, Material UI o Tailwind según preferencia.
- El despliegue puede hacerse en Vercel, Netlify o servidor propio.
