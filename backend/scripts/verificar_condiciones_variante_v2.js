const { generateSmartTemplatePdf } = require('../utils/smartTemplatePdf');

async function verificarCondicionesVarianteV2() {
  try {
    console.log('üîç VERIFICANDO CONDICIONES ESPEC√çFICAS DE VARIANTE V2 (PROBETAS)...');

    // Datos de prueba con variante V2 (PROBETAS)
    const testBundle = {
      quote: { 
        id: '2025-0927-289',
        variant_id: 'V2', // PROBETAS
        meta: {
          quote: {
            delivery_days: 5
          }
        }
      },
      company: { name: 'GEOFAL SAC', ruc: '20549356762' },
      project: { name: 'Proyecto V2 - PROBETAS', location: 'Lima' },
      items: [
        { code: 'PR01', description: 'Ensayo de resistencia a la compresi√≥n', norm: 'ASTM C39', unit_price: 80.00, quantity: 3 },
        { code: 'PR02', description: 'Ensayo de resistencia a la flexi√≥n', norm: 'ASTM C78', unit_price: 120.00, quantity: 2 }
      ]
    };

    console.log('\nüìã CONDICIONES ESPEC√çFICAS ESPERADAS PARA V2 (PROBETAS):');
    console.log('   ‚úÖ El cliente debe proporcionar las probetas antes del ingreso a obra.');
    console.log('   ‚úÖ El cliente deber√° de entregar las muestras debidamente identificadas.');
    console.log('   ‚úÖ El cliente deber√° especificar la Norma a ser utilizada para la ejecuci√≥n del ensayo, caso contrario se considera Norma ASTM o NTP vigente de acuerdo con el alcance del laboratorio.');
    console.log('   ‚úÖ El cliente deber√° entregar las muestras en las instalaciones del LEM, ubicado en la Av. Mara√±√≥n N¬∞ 763, Los Olivos, Lima.');
    console.log('   ‚úÖ Los resultados se entregar√°n en un plazo m√°ximo de 5 d√≠as h√°biles.');
    console.log('   ‚úÖ Los ensayos se realizar√°n dentro del alcance de acreditaci√≥n INACAL.');
    
    console.log('\nüìã Datos de prueba:');
    console.log(`   - N√∫mero: COT-${testBundle.quote.id}-${new Date().getFullYear().toString().slice(-2)}`);
    console.log(`   - Variante: ${testBundle.quote.variant_id} (PROBETAS)`);
    console.log(`   - T√≠tulo din√°mico: PROBETAS`);
    console.log(`   - D√≠as de entrega: ${testBundle.quote.meta.quote.delivery_days}`);
    console.log(`   - Items: ${testBundle.items.length}`);
    
    try {
      const outputPath = `tmp/test_variante_v2_condiciones_${Date.now()}.pdf`;
      await generateSmartTemplatePdf(testBundle, outputPath);
      console.log(`\n‚úÖ PDF generado exitosamente: ${outputPath}`);
      
      console.log('\nüéâ ¬°CONDICIONES ESPEC√çFICAS DE VARIANTE V2 VERIFICADAS!');
      console.log('‚úÖ Condiciones din√°micas funcionando correctamente');
      console.log('‚úÖ Template usando variant_conditions.conditions');
      console.log('‚úÖ Condiciones espec√≠ficas de PROBETAS aplicadas');
      console.log('‚úÖ D√≠as de entrega configurables (5 d√≠as)');
      console.log('‚úÖ T√≠tulo din√°mico: PROBETAS');
      
    } catch (error) {
      console.log(`\n‚ùå Error generando PDF: ${error.message}`);
      console.log('üîç Verificando si variant_conditions est√° disponible...');
      
      // Verificar que las condiciones de la variante est√©n disponibles
      const { getVariantConditions } = require('../utils/smartTemplatePdf');
      const conditions = getVariantConditions('V2');
      console.log('\nüìã Condiciones de V2 disponibles:');
      console.log('   - T√≠tulo:', conditions.title);
      console.log('   - D√≠as de entrega:', conditions.delivery_days);
      console.log('   - Condiciones espec√≠ficas:');
      conditions.conditions.forEach((condition, index) => {
        console.log(`     ${index + 1}. ${condition}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n de condiciones V2:', error.message);
  }
}

if (require.main === module) {
  verificarCondicionesVarianteV2();
} else {
  module.exports = verificarCondicionesVarianteV2;
}
