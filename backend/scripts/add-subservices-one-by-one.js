const pool = require('../config/db');

async function addSubservicesOneByOne() {
  console.log('üîß AGREGANDO SUBSERVICIOS UNO POR UNO - SECCI√ìN POR SECCI√ìN\n');
  
  try {
    // 1. Obtener el ID del servicio Laboratorio
    console.log('1Ô∏è‚É£ Obteniendo ID del servicio Laboratorio...');
    const serviceResult = await pool.query("SELECT id FROM services WHERE area = 'laboratorio'");
    const serviceId = serviceResult.rows[0].id;
    console.log(`‚úÖ ID del servicio Laboratorio: ${serviceId}`);

    // 2. Limpiar todos los subservicios existentes
    console.log('\n2Ô∏è‚É£ Limpiando subservicios existentes...');
    await pool.query('DELETE FROM subservices WHERE service_id = $1', [serviceId]);
    console.log('‚úÖ Subservicios existentes eliminados');

    // 3. Funci√≥n para agregar un subservicio
    async function addSubservice(codigo, descripcion, norma, precio) {
      try {
        await pool.query(`
          INSERT INTO subservices (codigo, descripcion, norma, precio, service_id, name, is_active)
          VALUES ($1, $2, $3, $4, $5, $6, true)
        `, [codigo, descripcion, norma, precio, serviceId, descripcion]);
        console.log(`   ‚úÖ ${codigo}: ${descripcion.substring(0, 40)}...`);
        return true;
      } catch (error) {
        console.log(`   ‚ùå ${codigo}: Error - ${error.message}`);
        return false;
      }
    }

    // 4. SECCI√ìN 1: ENSAYOS EST√ÅNDAR (20 subservicios)
    console.log('\n3Ô∏è‚É£ SECCI√ìN 1: ENSAYOS EST√ÅNDAR (20 subservicios)');
    console.log('üìã Esperando datos de ENSAYOS EST√ÅNDAR...');
    console.log('üí° Formato: codigo, descripcion, norma, precio');
    console.log('üí° Ejemplo: SU04, "Contenido de humedad con Speedy", "NTP 339.25", 30');
    console.log('üí° Para "Sujeto a evaluaci√≥n" usar precio: 0');
    console.log('üí° Para normas vac√≠as usar: "-"');
    console.log('\n‚è≥ Esperando que me proporciones los 20 ENSAYOS EST√ÅNDAR...');

    // 5. SECCI√ìN 2: ENSAYOS ESPECIALES (17 subservicios)
    console.log('\n4Ô∏è‚É£ SECCI√ìN 2: ENSAYOS ESPECIALES (17 subservicios)');
    console.log('üìã Esperando datos de ENSAYOS ESPECIALES...');
    console.log('üí° Formato: codigo, descripcion, norma, precio');
    console.log('üí° Ejemplo: EE01, "Conductividad el√©ctrica", "ASTM D1293", 250');
    console.log('\n‚è≥ Esperando que me proporciones los 17 ENSAYOS ESPECIALES...');

    // 6. SECCI√ìN 3: ENSAYO AGREGADO (17 subservicios)
    console.log('\n5Ô∏è‚É£ SECCI√ìN 3: ENSAYO AGREGADO (17 subservicios)');
    console.log('üìã Esperando datos de ENSAYO AGREGADO...');
    console.log('üí° Formato: codigo, descripcion, norma, precio');
    console.log('üí° Ejemplo: AG08A, "Inalterabilidad Agregado Grueso con Sulfato de Magnesio", "NTP 400.016", 350');
    console.log('\n‚è≥ Esperando que me proporciones los 17 ENSAYO AGREGADO...');

    // 7. SECCI√ìN 4: ENSAYOS DE CAMPO (8 subservicios)
    console.log('\n6Ô∏è‚É£ SECCI√ìN 4: ENSAYOS DE CAMPO (8 subservicios)');
    console.log('üìã Esperando datos de ENSAYOS DE CAMPO...');
    console.log('üí° Formato: codigo, descripcion, norma, precio');
    console.log('üí° Ejemplo: CAM01, "Ensayo de campo espec√≠fico", "ASTM D1234", 200');
    console.log('\n‚è≥ Esperando que me proporciones los 8 ENSAYOS DE CAMPO...');

    // 8. Verificar total final
    console.log('\n7Ô∏è‚É£ Verificando total final...');
    const totalResult = await pool.query(`
      SELECT COUNT(*) as total
      FROM subservices s 
      JOIN services sv ON s.service_id = sv.id 
      WHERE s.is_active = true 
      AND sv.area = 'laboratorio'
    `);
    
    const total = parseInt(totalResult.rows[0].total);
    console.log(`‚úÖ Total de subservicios: ${total}`);

    // 9. Verificar por secci√≥n
    const sections = [
      { name: 'ENSAYOS EST√ÅNDAR', prefix: 'SU' },
      { name: 'ENSAYOS ESPECIALES', prefix: 'EE' },
      { name: 'ENSAYO AGREGADO', prefix: 'AG' },
      { name: 'ENSAYOS DE CAMPO', prefix: 'CAM' }
    ];

    console.log('\n8Ô∏è‚É£ Verificando por secci√≥n...');
    for (const section of sections) {
      const sectionResult = await pool.query(`
        SELECT COUNT(*) as total
        FROM subservices s 
        JOIN services sv ON s.service_id = sv.id 
        WHERE s.is_active = true 
        AND sv.area = 'laboratorio'
        AND s.codigo LIKE $1
      `, [`${section.prefix}%`]);
      
      const sectionTotal = parseInt(sectionResult.rows[0].total);
      console.log(`   ${section.name}: ${sectionTotal} subservicios`);
    }

    console.log('\nüéâ SISTEMA LISTO PARA AGREGAR SUBSERVICIOS');
    console.log('‚úÖ Base de datos limpia y preparada');
    console.log('‚úÖ Listo para recibir datos secci√≥n por secci√≥n');
    console.log('‚úÖ Formato: codigo, descripcion, norma, precio');
    console.log('‚úÖ Precio 0 = "Sujeto a evaluaci√≥n"');
    console.log('‚úÖ Norma vac√≠a = "-"');
    
  } catch (error) {
    console.error('‚ùå Error preparando sistema:', error.message);
    throw error;
  }
}

async function main() {
  try {
    await addSubservicesOneByOne();
    console.log('\n‚úÖ Sistema preparado exitosamente');
    console.log('üìã Ahora puedes darme los datos secci√≥n por secci√≥n');
    process.exit(0);
  } catch (error) {
    console.error('üí• Error fatal:', error);
    process.exit(1);
  }
}

main();
