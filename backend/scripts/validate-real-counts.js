const pool = require('../config/db');

async function validateRealCounts() {
  try {
    console.log('üîç VALIDANDO CONTEOS REALES SEG√öN LAS IM√ÅGENES...\n');
    
    // Seg√∫n las im√°genes que proporcionaste:
    // ENSAYO EST√ÅNDAR: 20 subservicios (c√≥digos SU*)
    // ENSAYOS ESPECIALES: 16 subservicios (c√≥digos EE*)
    // ENSAYOS DE CAMPO: 8 subservicios (c√≥digos SU*)
    // ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO: 6 subservicios (c√≥digos SU*)
    
    console.log('1Ô∏è‚É£ VERIFICANDO ESTADO ACTUAL DE LA BD:');
    
    const currentState = await pool.query(`
      SELECT 
        s.name,
        COUNT(sub.id) as subservices_count
      FROM services s
      LEFT JOIN subservices sub ON s.id = sub.service_id AND sub.is_active = true
      WHERE s.name IN ('ENSAYO EST√ÅNDAR', 'ENSAYOS ESPECIALES', 'ENSAYOS DE CAMPO', 'ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO')
      GROUP BY s.id, s.name
      ORDER BY s.name
    `);
    
    console.log('   üìä ESTADO ACTUAL:');
    currentState.rows.forEach(row => {
      console.log(`   ${row.name}: ${row.subservices_count} subservicios`);
    });
    
    // 2. Verificar qu√© c√≥digos tenemos realmente
    console.log('\n2Ô∏è‚É£ C√ìDIGOS REALES EN CADA SERVICIO:');
    
    for (const serviceName of ['ENSAYO EST√ÅNDAR', 'ENSAYOS ESPECIALES', 'ENSAYOS DE CAMPO', 'ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO']) {
      const codesResult = await pool.query(`
        SELECT codigo FROM subservices 
        WHERE service_id = (SELECT id FROM services WHERE name = $1) 
        AND is_active = true 
        ORDER BY codigo
      `, [serviceName]);
      
      const codes = codesResult.rows.map(row => row.codigo);
      console.log(`   ${serviceName}: ${codes.join(', ')}`);
    }
    
    // 3. Verificar si hay subservicios en "OTROS SERVICIOS" que deber√≠an estar en otros
    console.log('\n3Ô∏è‚É£ VERIFICANDO "OTROS SERVICIOS":');
    
    const otrosServiciosResult = await pool.query(`
      SELECT sub.codigo, sub.descripcion
      FROM subservices sub
      JOIN services s ON sub.service_id = s.id
      WHERE s.name = 'OTROS SERVICIOS' AND sub.is_active = true
      ORDER BY sub.codigo
    `);
    
    if (otrosServiciosResult.rows.length > 0) {
      console.log(`   ‚ö†Ô∏è  "OTROS SERVICIOS" tiene ${otrosServiciosResult.rows.length} subservicios:`);
      otrosServiciosResult.rows.forEach(row => {
        console.log(`     - ${row.codigo}: ${row.descripcion.substring(0, 50)}...`);
      });
    } else {
      console.log('   ‚úÖ "OTROS SERVICIOS" est√° vac√≠o');
    }
    
    // 4. Verificar si hay subservicios duplicados o mal asignados
    console.log('\n4Ô∏è‚É£ VERIFICANDO DUPLICADOS Y MALAS ASIGNACIONES:');
    
    // Buscar subservicios con c√≥digos que no coinciden con el servicio
    const mismatchedCodes = await pool.query(`
      SELECT s.name as service_name, sub.codigo, sub.descripcion
      FROM subservices sub
      JOIN services s ON sub.service_id = s.id
      WHERE sub.is_active = true
      AND (
        (s.name = 'ENSAYO EST√ÅNDAR' AND NOT (sub.codigo LIKE 'ES%' OR sub.codigo LIKE 'SU%'))
        OR (s.name = 'ENSAYOS ESPECIALES' AND NOT sub.codigo LIKE 'EE%')
        OR (s.name = 'ENSAYOS DE CAMPO' AND NOT sub.codigo LIKE 'SU%')
        OR (s.name = 'ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO' AND NOT sub.codigo LIKE 'SU%')
      )
    `);
    
    if (mismatchedCodes.rows.length > 0) {
      console.log('   ‚ö†Ô∏è  Subservicios con c√≥digos que no coinciden:');
      mismatchedCodes.rows.forEach(row => {
        console.log(`     - ${row.service_name}: ${row.codigo} - ${row.descripcion.substring(0, 50)}...`);
      });
    } else {
      console.log('   ‚úÖ Todos los c√≥digos coinciden con sus servicios');
    }
    
    // 5. Verificar totales
    console.log('\n5Ô∏è‚É£ TOTALES GENERALES:');
    
    const totalServices = await pool.query('SELECT COUNT(*) FROM services');
    const totalSubservices = await pool.query('SELECT COUNT(*) FROM subservices WHERE is_active = true');
    
    console.log(`   Servicios totales: ${totalServices.rows[0].count}`);
    console.log(`   Subservicios activos: ${totalSubservices.rows[0].count}`);
    
    // 6. Mostrar distribuci√≥n completa
    console.log('\n6Ô∏è‚É£ DISTRIBUCI√ìN COMPLETA:');
    
    const fullDistribution = await pool.query(`
      SELECT 
        s.name,
        COUNT(sub.id) as subservices_count
      FROM services s
      LEFT JOIN subservices sub ON s.id = sub.service_id AND sub.is_active = true
      GROUP BY s.id, s.name
      ORDER BY subservices_count DESC, s.name
    `);
    
    fullDistribution.rows.forEach(row => {
      console.log(`   ${row.name}: ${row.subservices_count} subservicios`);
    });
    
    console.log('\nüéØ CONCLUSI√ìN:');
    console.log('   Seg√∫n las im√°genes, los conteos deber√≠an ser:');
    console.log('   - ENSAYO EST√ÅNDAR: 20 subservicios (c√≥digos SU*)');
    console.log('   - ENSAYOS ESPECIALES: 16 subservicios (c√≥digos EE*)');
    console.log('   - ENSAYOS DE CAMPO: 8 subservicios (c√≥digos SU*)');
    console.log('   - ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO: 6 subservicios (c√≥digos SU*)');
    
  } catch (error) {
    console.error('‚ùå Error validando conteos:', error.message);
  } finally {
    await pool.end();
  }
}

validateRealCounts();
