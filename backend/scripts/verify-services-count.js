const pool = require('../config/db');

async function verifyServicesCount() {
  try {
    console.log('üîç VERIFICANDO CONTEOS REALES DE SERVICIOS Y SUBSERVICIOS...\n');
    
    // 1. Verificar cada servicio individualmente
    console.log('1Ô∏è‚É£ VERIFICACI√ìN DETALLADA POR SERVICIO:');
    
    const servicesToCheck = [
      'ENSAYO EST√ÅNDAR',
      'ENSAYOS ESPECIALES', 
      'ENSAYOS DE CAMPO',
      'ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO'
    ];
    
    for (const serviceName of servicesToCheck) {
      console.log(`\nüìã ${serviceName}:`);
      
      // Obtener el servicio
      const serviceResult = await pool.query('SELECT id, name FROM services WHERE name = $1', [serviceName]);
      if (serviceResult.rows.length === 0) {
        console.log(`   ‚ùå Servicio no encontrado`);
        continue;
      }
      
      const serviceId = serviceResult.rows[0].id;
      console.log(`   ID: ${serviceId}`);
      
      // Contar subservicios activos
      const countResult = await pool.query(
        'SELECT COUNT(*) FROM subservices WHERE service_id = $1 AND is_active = true', 
        [serviceId]
      );
      const activeCount = parseInt(countResult.rows[0].count);
      console.log(`   Subservicios activos: ${activeCount}`);
      
      // Mostrar todos los subservicios
      const subservicesResult = await pool.query(`
        SELECT codigo, descripcion, is_active 
        FROM subservices 
        WHERE service_id = $1 
        ORDER BY codigo
      `, [serviceId]);
      
      console.log(`   Lista de subservicios:`);
      subservicesResult.rows.forEach(sub => {
        const status = sub.is_active ? '‚úÖ' : '‚ùå';
        console.log(`     ${status} ${sub.codigo}: ${sub.descripcion.substring(0, 50)}...`);
      });
      
      // Contar inactivos
      const inactiveCount = subservicesResult.rows.filter(sub => !sub.is_active).length;
      if (inactiveCount > 0) {
        console.log(`   ‚ö†Ô∏è  Subservicios inactivos: ${inactiveCount}`);
      }
    }
    
    // 2. Verificar si hay subservicios duplicados o mal asignados
    console.log('\n2Ô∏è‚É£ VERIFICANDO POSIBLES PROBLEMAS:');
    
    // Buscar subservicios con c√≥digos que no coinciden con el servicio
    const mismatchedCodes = await pool.query(`
      SELECT s.name as service_name, sub.codigo, sub.descripcion
      FROM subservices sub
      JOIN services s ON sub.service_id = s.id
      WHERE sub.is_active = true
      AND (
        (s.name = 'ENSAYO EST√ÅNDAR' AND NOT (sub.codigo LIKE 'ES%' OR sub.codigo LIKE 'EE%'))
        OR (s.name = 'ENSAYOS ESPECIALES' AND NOT sub.codigo LIKE 'EE%')
        OR (s.name = 'ENSAYOS DE CAMPO' AND NOT sub.codigo LIKE 'SU%')
        OR (s.name = 'ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO' AND NOT sub.codigo LIKE 'SU%')
      )
    `);
    
    if (mismatchedCodes.rows.length > 0) {
      console.log('   ‚ö†Ô∏è  Subservicios con c√≥digos que no coinciden:');
      mismatchedCodes.rows.forEach(row => {
        console.log(`     - ${row.service_name}: ${row.codigo} - ${row.descripcion.substring(0, 50)}...`);
      });
    } else {
      console.log('   ‚úÖ Todos los c√≥digos coinciden con sus servicios');
    }
    
    // 3. Verificar distribuci√≥n real
    console.log('\n3Ô∏è‚É£ DISTRIBUCI√ìN REAL DE SUBSERVICIOS:');
    
    const distributionResult = await pool.query(`
      SELECT 
        s.name,
        COUNT(sub.id) as total_subservices,
        COUNT(CASE WHEN sub.is_active = true THEN 1 END) as active_subservices,
        COUNT(CASE WHEN sub.is_active = false THEN 1 END) as inactive_subservices
      FROM services s
      LEFT JOIN subservices sub ON s.id = sub.service_id
      WHERE s.name IN ('ENSAYO EST√ÅNDAR', 'ENSAYOS ESPECIALES', 'ENSAYOS DE CAMPO', 'ENSAYO QU√çMICO SUELO Y AGUA SUBTERR√ÅNEO')
      GROUP BY s.id, s.name
      ORDER BY s.name
    `);
    
    distributionResult.rows.forEach(row => {
      console.log(`   ${row.name}:`);
      console.log(`     Total: ${row.total_subservices}, Activos: ${row.active_subservices}, Inactivos: ${row.inactive_subservices}`);
    });
    
    // 4. Verificar si hay subservicios en "OTROS SERVICIOS" que deber√≠an estar en otros
    console.log('\n4Ô∏è‚É£ VERIFICANDO "OTROS SERVICIOS":');
    
    const otrosServiciosResult = await pool.query(`
      SELECT sub.codigo, sub.descripcion
      FROM subservices sub
      JOIN services s ON sub.service_id = s.id
      WHERE s.name = 'OTROS SERVICIOS' AND sub.is_active = true
      ORDER BY sub.codigo
    `);
    
    if (otrosServiciosResult.rows.length > 0) {
      console.log(`   ‚ö†Ô∏è  "OTROS SERVICIOS" tiene ${otrosServiciosResult.rows.length} subservicios:`);
      otrosServiciosResult.rows.forEach(row => {
        console.log(`     - ${row.codigo}: ${row.descripcion.substring(0, 50)}...`);
      });
    } else {
      console.log('   ‚úÖ "OTROS SERVICIOS" est√° vac√≠o');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando conteos:', error.message);
  } finally {
    await pool.end();
  }
}

verifyServicesCount();
