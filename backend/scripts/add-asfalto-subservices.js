const pool = require('../config/db');

async function addAsfaltoSubservices() {
  console.log('üîß AGREGANDO ENSAYO ASFALTO (24 subservicios)\n');
  
  try {
    // 1. Obtener el ID del servicio Laboratorio
    console.log('1Ô∏è‚É£ Obteniendo ID del servicio Laboratorio...');
    const serviceResult = await pool.query("SELECT id FROM services WHERE area = 'laboratorio'");
    const serviceId = serviceResult.rows[0].id;
    console.log(`‚úÖ ID del servicio Laboratorio: ${serviceId}`);

    // 2. Funci√≥n para agregar un subservicio
    async function addSubservice(codigo, descripcion, norma, precio) {
      try {
        // Verificar si el c√≥digo ya existe
        const existingSubservice = await pool.query('SELECT id FROM subservices WHERE codigo = $1 AND service_id = $2', [codigo, serviceId]);
        if (existingSubservice.rows.length > 0) {
          console.warn(`   ‚ö†Ô∏è  ${codigo}: Ya existe (omitido)`);
          return false; // Indica que no se agreg√≥
        }

        await pool.query(`
          INSERT INTO subservices (codigo, descripcion, norma, precio, service_id, name, is_active)
          VALUES ($1, $2, $3, $4, $5, $6, true)
        `, [codigo, descripcion, norma, precio, serviceId, descripcion]);
        console.log(`   ‚úÖ ${codigo}: ${descripcion.substring(0, 50)}...`);
        return true; // Indica que se agreg√≥
      } catch (error) {
        console.error(`   ‚ùå Error agregando ${codigo}:`, error.message);
        return false; // Indica que hubo un error
      }
    }

    // 3. Agregar los 24 ENSAYOS ASFALTO
    console.log('\n2Ô∏è‚É£ Agregando ENSAYOS ASFALTO...');
    let addedCount = 0;

    // Primera parte (AS01-AS13)
    if (await addSubservice('AS01', 'Penetraci√≥n', 'D5', 0)) addedCount++;
    if (await addSubservice('AS02', 'Punto de inflamaci√≥n', 'D92', 0)) addedCount++;
    if (await addSubservice('AS03', 'Solubilidad en tricloroetileno', 'D2042', 0)) addedCount++;
    if (await addSubservice('AS04', 'Ensayo de la mancha (Oliensis)', 'AASHTO T102', 0)) addedCount++;
    if (await addSubservice('AS05', 'Ductilidad', 'D113', 0)) addedCount++;
    if (await addSubservice('AS06', 'Pel√≠cula delgada (Incluye: p√©rdida por calentamiento, penetraci√≥n del residuo, ductilidad del residuo)', 'D1754', 0)) addedCount++;
    if (await addSubservice('AS07', 'Punto de ablandamiento', 'D36', 0)) addedCount++;
    if (await addSubservice('AS08', 'Viscosidad Saybolt Furol', 'D244/D88', 0)) addedCount++;
    if (await addSubservice('AS09', '√çndice de penetraci√≥n (incluye 3 ensayos de penetraci√≥n)', 'D5', 0)) addedCount++;
    if (await addSubservice('AS10', 'Control de calidad de asfalto emulsificado (Incluye: Viscosidad SF, estabilidad al almacenamiento, carga de part√≠cula, tamizado, destilaci√≥n, ensayos en residuo: penetraci√≥n, ductilidad y solubilidad)', 'D2397/D977', 0)) addedCount++;
    if (await addSubservice('AS11', 'Peso espec√≠fico', 'D70', 0)) addedCount++;
    if (await addSubservice('AS12', 'Viscosidad cinem√°tica', 'D2170', 0)) addedCount++;
    if (await addSubservice('AS13', 'Control de calidad de asfaltos l√≠quidos (Incluye: viscosidad cinem√°tica, punto de inflamaci√≥n, destilaci√≥n y determinaci√≥n del residuo, ensayos en residuo: penetraci√≥n, ductilidad y solubilidad; contenido de agua)', 'D2026 D2027 D2028', 0)) addedCount++;

    // Segunda parte (AS14-AS25)
    if (await addSubservice('AS14', 'Ensayos al residuo de destilaci√≥n (Incluye: destilaci√≥n, penetraci√≥n, ductilidad y solubilidad)', '-', 0)) addedCount++;
    if (await addSubservice('AS15', 'Contenido de agua', 'D95', 0)) addedCount++;
    if (await addSubservice('AS16', 'Control de calidad de cementos asf√°lticos (Incluye: penetraci√≥n, punto de inflamaci√≥n, solubilidad, ductilidad, p√©rdida por calentamiento, penetraci√≥n retenida y ductilidad del residuo)', 'D946', 0)) addedCount++;
    if (await addSubservice('AS17', 'P√©rdida por calentamiento', 'D1754', 0)) addedCount++;
    if (await addSubservice('AS18', 'Estabilidad al almacenamiento', 'D244', 0)) addedCount++;
    if (await addSubservice('AS19', 'Carga de part√≠cula', 'D244', 0)) addedCount++;
    if (await addSubservice('AS20', 'Tamizado malla N¬∞ 20', 'D244', 0)) addedCount++;
    if (await addSubservice('AS21', 'Destilaci√≥n y determinaci√≥n del residuo', 'D244', 0)) addedCount++;
    if (await addSubservice('AS22', 'Evaporaci√≥n y determinaci√≥n del residuo', 'D244', 0)) addedCount++;
    if (await addSubservice('AS23', 'Sedimentaci√≥n a los 5 d√≠as', 'D244', 0)) addedCount++;
    if (await addSubservice('AS24', 'Ensayos al residuo de evaporaci√≥n (Incluye: evaporaci√≥n y determinaci√≥n del residuo, penetraci√≥n, solubilidad, punto de ablandamiento)', '-', 0)) addedCount++;
    if (await addSubservice('AS25', 'Control de calidad de emulsi√≥n cati√≥nica modificada con pol√≠meros (Incluye: Viscosidad SF, Estabilidad al almacenamiento, carga de part√≠cula, tamizado, sedimentaci√≥n, evaporaci√≥n, ensayos en residuo: penetraci√≥n, solubilidad y punto de ablandamiento)', 'D2397', 0)) addedCount++;

    console.log(`\n‚úÖ ${addedCount} subservicios de ENSAYO ASFALTO agregados`);

    // 4. Verificar total
    console.log('\n3Ô∏è‚É£ Verificando total...');
    const totalResult = await pool.query(`
      SELECT COUNT(*) as total
      FROM subservices s 
      JOIN services sv ON s.service_id = sv.id 
      WHERE s.is_active = true 
      AND sv.area = 'laboratorio'
    `);
    
    const total = parseInt(totalResult.rows[0].total);
    console.log(`‚úÖ Total de subservicios: ${total}`);

    // 5. Mostrar algunos ejemplos
    console.log('\n4Ô∏è‚É£ Ejemplos agregados:');
    const examples = await pool.query(`
      SELECT codigo, descripcion, precio
      FROM subservices s 
      JOIN services sv ON s.service_id = sv.id 
      WHERE s.is_active = true 
      AND sv.area = 'laboratorio'
      AND s.codigo LIKE 'AS%'
      ORDER BY s.codigo
      LIMIT 5
    `);
    
    examples.rows.forEach(row => {
      const precio = (row.precio && parseFloat(row.precio) > 0) ? `S/ ${parseFloat(row.precio).toFixed(2)}` : 'Sujeto a evaluaci√≥n';
      console.log(`   ${row.codigo}: ${row.descripcion.substring(0, 40)}... - ${precio}`);
    });

    console.log('\nüéâ ENSAYO ASFALTO COMPLETADO');
    console.log('‚úÖ 24 subservicios agregados correctamente');
    console.log('‚úÖ Listo para la siguiente secci√≥n');
    
  } catch (error) {
    console.error('‚ùå Error agregando ENSAYO ASFALTO:', error.message);
    throw error;
  }
}

async function main() {
  try {
    await addAsfaltoSubservices();
    console.log('\n‚úÖ Proceso completado exitosamente');
    process.exit(0);
  } catch (error) {
    console.error('üí• Error fatal:', error);
    process.exit(1);
  }
}

main();
