const db = require('../config/db');

async function addTestTickets() {
  try {
    console.log('üé´ Agregando tickets de prueba...');
    
    // Verificar si ya existen tickets
    const ticketsCount = await db.query('SELECT COUNT(*) as count FROM tickets');
    console.log(`üìä Tickets actuales: ${ticketsCount.rows[0].count}`);
    
    if (parseInt(ticketsCount.rows[0].count) === 0) {
      // Crear tickets de prueba
      const tickets = [
        {
          title: 'Solicitud de informaci√≥n sobre servicios',
          description: 'Necesito informaci√≥n detallada sobre los servicios de an√°lisis de suelos que ofrecen.',
          priority: 'media',
          status: 'abierto',
          category: 'consulta'
        },
        {
          title: 'Problema con cotizaci√≥n',
          description: 'Hay un error en el c√°lculo de la cotizaci√≥n COT-2025-0001. El monto no coincide.',
          priority: 'alta',
          status: 'abierto',
          category: 'error'
        },
        {
          title: 'Consulta sobre proyecto',
          description: '¬øCu√°l es el avance del proyecto de an√°lisis de suelos?',
          priority: 'baja',
          status: 'cerrado',
          category: 'seguimiento'
        },
        {
          title: 'Solicitud de modificaci√≥n',
          description: 'Necesito modificar los par√°metros del estudio de impacto ambiental.',
          priority: 'media',
          status: 'abierto',
          category: 'modificacion'
        },
        {
          title: 'Problema t√©cnico',
          description: 'No puedo acceder al sistema de reportes.',
          priority: 'alta',
          status: 'abierto',
          category: 'tecnico'
        }
      ];
      
      for (const ticket of tickets) {
        await db.query(`
          INSERT INTO tickets (title, description, priority, status, user_id, created_at)
          VALUES ($1, $2, $3, $4, 6, NOW())
        `, [ticket.title, ticket.description, ticket.priority, ticket.status]);
      }
      
      console.log('‚úÖ Tickets de prueba creados exitosamente');
    } else {
      console.log('‚ÑπÔ∏è Ya existen tickets en la base de datos');
    }
    
    // Verificar tickets finales
    const finalTicketsCount = await db.query('SELECT COUNT(*) as count FROM tickets');
    const openTicketsCount = await db.query("SELECT COUNT(*) as count FROM tickets WHERE status = 'abierto'");
    
    console.log(`üìä Tickets totales: ${finalTicketsCount.rows[0].count}`);
    console.log(`üìä Tickets abiertos: ${openTicketsCount.rows[0].count}`);
    
    console.log('üéâ Tickets setup completado exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error agregando tickets de prueba:', error);
    throw error;
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  addTestTickets()
    .then(() => {
      console.log('‚úÖ Setup completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en setup:', error);
      process.exit(1);
    });
}

module.exports = addTestTickets;
