const axios = require('axios');

async function testAutocompleteFunctionality() {
  try {
    console.log('üß™ Probando funcionalidad del autocompletado...\n');

    const baseURL = 'http://localhost:4000';
    
    // 1. Verificar que el backend est√© funcionando
    console.log('üîç Verificando backend...');
    try {
      const healthResponse = await axios.get(`${baseURL}/api/health`);
      console.log('‚úÖ Backend funcionando correctamente');
    } catch (error) {
      console.log('‚ùå Backend no est√° funcionando:', error.message);
      console.log('üí° Aseg√∫rate de que el backend est√© ejecut√°ndose en el puerto 4000');
      return;
    }

    // 2. Probar b√∫squeda de subservicios
    console.log('\nüîç Probando b√∫squeda de subservicios...');
    const searchTerms = ['arg', 'agregado', 'concreto', 'ensayo'];
    
    for (const term of searchTerms) {
      console.log(`\nBuscando: "${term}"`);
      try {
        const response = await axios.get(`${baseURL}/api/subservices/search?q=${encodeURIComponent(term)}&limit=5`);
        
        if (response.data && response.data.data) {
          console.log(`  ‚úÖ Resultados encontrados: ${response.data.data.length}`);
          response.data.data.forEach((item, index) => {
            console.log(`    ${index + 1}. ${item.codigo} - ${item.descripcion}`);
          });
        } else {
          console.log(`  ‚ö†Ô∏è No se encontraron resultados para "${term}"`);
        }
      } catch (error) {
        console.log(`  ‚ùå Error buscando "${term}":`, error.message);
      }
    }

    // 3. Probar b√∫squeda con t√©rminos cortos
    console.log('\nüîç Probando b√∫squeda con t√©rminos cortos...');
    const shortTerms = ['a', 'ar'];
    
    for (const term of shortTerms) {
      console.log(`\nBuscando: "${term}" (t√©rmino corto)`);
      try {
        const response = await axios.get(`${baseURL}/api/subservices/search?q=${encodeURIComponent(term)}&limit=5`);
        
        if (response.data && response.data.data) {
          console.log(`  Resultados: ${response.data.data.length}`);
          if (response.data.data.length === 0) {
            console.log(`  ‚úÖ Correcto: t√©rminos cortos no devuelven resultados`);
          } else {
            console.log(`  ‚ö†Ô∏è Inesperado: t√©rminos cortos devuelven resultados`);
          }
        }
      } catch (error) {
        console.log(`  ‚ùå Error buscando "${term}":`, error.message);
      }
    }

    // 4. Probar rendimiento
    console.log('\n‚ö° Probando rendimiento...');
    const performanceTests = ['agregado', 'concreto', 'ensayo'];
    
    for (const term of performanceTests) {
      const startTime = Date.now();
      try {
        const response = await axios.get(`${baseURL}/api/subservices/search?q=${encodeURIComponent(term)}&limit=10`);
        const endTime = Date.now();
        const queryTime = endTime - startTime;
        
        console.log(`  "${term}": ${queryTime}ms (${response.data.data.length} resultados)`);
        
        if (queryTime > 1000) {
          console.log(`    ‚ö†Ô∏è Consulta lenta para "${term}"`);
        } else {
          console.log(`    ‚úÖ Consulta r√°pida para "${term}"`);
        }
      } catch (error) {
        console.log(`  ‚ùå Error en prueba de rendimiento para "${term}":`, error.message);
      }
    }

    // 5. Probar l√≠mites
    console.log('\nüìä Probando l√≠mites...');
    const limitTests = [1, 5, 10, 20];
    
    for (const limit of limitTests) {
      console.log(`\nProbando l√≠mite: ${limit}`);
      try {
        const response = await axios.get(`${baseURL}/api/subservices/search?q=agregado&limit=${limit}`);
        
        if (response.data && response.data.data) {
          console.log(`  ‚úÖ L√≠mite ${limit}: ${response.data.data.length} resultados`);
          
          if (response.data.data.length > limit) {
            console.log(`    ‚ö†Ô∏è M√°s resultados de los esperados`);
          } else {
            console.log(`    ‚úÖ L√≠mite respetado correctamente`);
          }
        }
      } catch (error) {
        console.log(`  ‚ùå Error probando l√≠mite ${limit}:`, error.message);
      }
    }

    console.log('\nüéâ PRUEBAS COMPLETADAS');
    console.log('‚úÖ Backend funcionando');
    console.log('‚úÖ B√∫squedas funcionando');
    console.log('‚úÖ Rendimiento evaluado');
    console.log('‚úÖ L√≠mites verificados');
    console.log('\nüí° Si el autocompletado sigue apareciendo y desapareciendo:');
    console.log('   - Verifica que el componente React est√© usando la versi√≥n Simple');
    console.log('   - Revisa la consola del navegador para errores');
    console.log('   - Aseg√∫rate de que no haya conflictos de CSS');

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
  } finally {
    process.exit(0);
  }
}

testAutocompleteFunctionality();
