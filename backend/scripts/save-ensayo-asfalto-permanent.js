const pool = require('../config/db');

async function saveEnsayoAsfaltoPermanent() {
  try {
    console.log('üíæ GUARDANDO ENSAYO ASFALTO DE FORMA PERMANENTE...\n');
    
    // 1. Obtener el ID de ENSAYO ASFALTO
    console.log('1Ô∏è‚É£ Obteniendo ID de ENSAYO ASFALTO...');
    const ensayoAsfalto = await pool.query("SELECT id FROM services WHERE name = 'ENSAYO ASFALTO'");
    const ensayoAsfaltoId = ensayoAsfalto.rows[0].id;
    console.log(`‚úÖ ID de ENSAYO ASFALTO: ${ensayoAsfaltoId}`);
    
    // 2. Datos EXACTOS de ENSAYO ASFALTO (NO MODIFICAR)
    const subservicesData = [
      { codigo: 'AS01', descripcion: 'Penetraci√≥n', norma: null, precio: 120 },
      { codigo: 'AS02', descripcion: 'Punto de inflamaci√≥n', norma: 'NTP 321.058', precio: 0 },
      { codigo: 'AS03', descripcion: 'Solubilidad en tricloroetileno', norma: null, precio: 85 },
      { codigo: 'AS04', descripcion: 'Ensayo de la mancha (Oliensis)', norma: null, precio: 0 },
      { codigo: 'AS05', descripcion: 'Ductilidad', norma: null, precio: 125 },
      { codigo: 'AS06', descripcion: 'Pel√≠cula delgada (Incluye: p√©rdida por calentamiento, penetraci√≥n del residuo, ductilidad del residuo)', norma: null, precio: 0 },
      { codigo: 'AS07', descripcion: 'Punto de ablandamiento', norma: null, precio: 0 },
      { codigo: 'AS08', descripcion: 'Viscosidad Saybolt Furol', norma: 'NTP 321.07', precio: 115 },
      { codigo: 'AS09', descripcion: '√çndice de penetraci√≥n (incluye 3 ensayos de penetraci√≥n)', norma: null, precio: 0 },
      { codigo: 'AS10', descripcion: 'Control de calidad de asfalto emulsificado (Incluye: Viscosidad SF, estabilidad al almacenamiento, carga de part√≠cula, tamizado, destilaci√≥n, ensayos en residuo: penetraci√≥n, ductilidad u solubilidad)', norma: 'NTP 321.059', precio: 0 },
      { codigo: 'AS11', descripcion: 'Peso espec√≠fico', norma: 'NTP 321.084', precio: 0 },
      { codigo: 'AS12', descripcion: 'Viscosidad cinem√°tica', norma: null, precio: 0 },
      { codigo: 'AS13', descripcion: 'Control de calidad de asfaltos l√≠quidos (Incluye: viscosidad cinem√°tica, punto de inflamaci√≥n, destilaci√≥n y determinaci√≥n del residuo, ensayos en residuo: penetraci√≥n, ductilidad u solubilidad: contenido de agua)', norma: 'NTP 321.026 321.027 321.028', precio: 0 },
      { codigo: 'AS14', descripcion: 'Ensayos al residuo de destilaci√≥n (Incluye: destilaci√≥n, penetraci√≥n, ductilidad y solubilidad)', norma: null, precio: 0 },
      { codigo: 'AS15', descripcion: 'Contenido de agua', norma: 'NTP 321.067', precio: 0 },
      { codigo: 'AS16', descripcion: 'Control de calidad de cementos asf√°lticos (Incluye: penetraci√≥n, punto de inflamaci√≥n, solubilidad, ductilidad, p√©rdida por calentamiento, penetraci√≥n retenida u ductilidad del residuo)', norma: 'NTP 321.051', precio: 0 },
      { codigo: 'AS17', descripcion: 'P√©rdida por calentamiento', norma: null, precio: 0 },
      { codigo: 'AS18', descripcion: 'Estabilidad al almacenamiento', norma: 'NTP 321.082', precio: 0 },
      { codigo: 'AS19', descripcion: 'Carga de part√≠cula', norma: 'NTP 321.061', precio: 0 },
      { codigo: 'AS20', descripcion: 'Tamizado malla N\' 20', norma: 'NTP 321.073', precio: 0 },
      { codigo: 'AS21', descripcion: 'Destilaci√≥n y determinaci√≥n del residuo', norma: 'NTP 321.068', precio: 0 },
      { codigo: 'AS22', descripcion: 'Evaporaci√≥n y determinaci√≥n del residuo', norma: 'NTP 321.064', precio: 0 },
      { codigo: 'AS23', descripcion: 'Sedimentaci√≥n a los 5 d√≠as', norma: 'NTP 321.076', precio: 0 },
      { codigo: 'AS24', descripcion: 'Ensayos al residuo de evaporaci√≥n (Incluye: evaporaci√≥n y determinaci√≥n del residuo, penetraci√≥n, solubilidad, punto de ablandamiento)', norma: null, precio: 0 },
      { codigo: 'AS25', descripcion: 'Control de calidad de emulsi√≥n cati√≥nica modificada con pol√≠meros (Incluye: Viscosidad SF, Estabilidad al almacenamiento, carga de part√≠cula, tamizado, sedimentaci√≥n, evaporaci√≥n, ensayos en residuo: penetraci√≥n, solubilidad u punto de ablandamiento)', norma: 'NTP 321.141', precio: 0 }
    ];
    
    console.log(`\n2Ô∏è‚É£ Agregando ${subservicesData.length} subservicios a ENSAYO ASFALTO...`);
    
    let addedCount = 0;
    let skippedCount = 0;
    
    for (const subservice of subservicesData) {
      try {
        // Verificar si ya existe
        const existing = await pool.query(
          'SELECT id FROM subservices WHERE codigo = $1 AND service_id = $2', 
          [subservice.codigo, ensayoAsfaltoId]
        );
        
        if (existing.rows.length > 0) {
          console.log(`   ‚ö†Ô∏è  ${subservice.codigo}: Ya existe (omitido)`);
          skippedCount++;
          continue;
        }
        
        // Insertar subservicio
        await pool.query(`
          INSERT INTO subservices (codigo, descripcion, norma, precio, service_id, name, is_active)
          VALUES ($1, $2, $3, $4, $5, $6, true)
        `, [
          subservice.codigo,
          subservice.descripcion,
          subservice.norma,
          subservice.precio,
          ensayoAsfaltoId,
          subservice.descripcion
        ]);
        
        console.log(`   ‚úÖ ${subservice.codigo}: ${subservice.descripcion.substring(0, 50)}...`);
        addedCount++;
        
      } catch (error) {
        if (error.code === '23505') { // C√≥digo duplicado
          console.log(`   ‚ö†Ô∏è  ${subservice.codigo}: Ya existe (omitido)`);
          skippedCount++;
        } else {
          console.error(`   ‚ùå Error agregando ${subservice.codigo}:`, error.message);
        }
      }
    }
    
    console.log(`\nüìä RESUMEN:`);
    console.log(`   ‚úÖ Agregados: ${addedCount}`);
    console.log(`   ‚ö†Ô∏è  Omitidos: ${skippedCount}`);
    console.log(`   üìã Total procesados: ${subservicesData.length}`);
    
    // 3. Verificar el estado final
    console.log('\n3Ô∏è‚É£ Verificando estado final...');
    const finalState = await pool.query(`
      SELECT 
        s.name,
        COUNT(sub.id) as subservices_count
      FROM services s 
      LEFT JOIN subservices sub ON s.id = sub.service_id AND sub.is_active = true
      WHERE s.name = 'ENSAYO ASFALTO'
      GROUP BY s.id, s.name
    `);
    
    if (finalState.rows.length > 0) {
      console.log(`   üìä ENSAYO ASFALTO: ${finalState.rows[0].subservices_count} subservicios`);
    }
    
    // 4. Mostrar todos los subservicios guardados
    console.log('\n4Ô∏è‚É£ SUBSERVICIOS GUARDADOS EN ENSAYO ASFALTO:');
    const savedSubservices = await pool.query(`
      SELECT sub.codigo, sub.descripcion, sub.norma, sub.precio
      FROM subservices sub
      JOIN services s ON sub.service_id = s.id
      WHERE s.name = 'ENSAYO ASFALTO' 
      AND sub.is_active = true
      ORDER BY sub.codigo
    `);
    
    savedSubservices.rows.forEach(row => {
      const precio = row.precio === 0 ? 'Sujeto a evaluaci√≥n' : `S/ ${row.precio}`;
      console.log(`   - ${row.codigo}: ${row.descripcion} (${row.norma || 'Sin norma'}) - ${precio}`);
    });
    
    console.log('\nüéâ ENSAYO ASFALTO GUARDADO DE FORMA PERMANENTE');
    console.log('‚úÖ Los datos est√°n listos para uso en producci√≥n');
    console.log('‚úÖ Los c√≥digos son √∫nicos y no se pueden modificar');
    console.log('‚úÖ Se integrar√° correctamente con otros m√≥dulos');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await pool.end();
  }
}

saveEnsayoAsfaltoPermanent();
