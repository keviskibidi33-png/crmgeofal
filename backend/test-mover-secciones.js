const { generateSmartTemplatePdf } = require('./utils/smartTemplatePdf');

// Funci√≥n para crear items de prueba
function createTestItems(count) {
  const items = [];
  for (let i = 1; i <= count; i++) {
    items.push({
      code: `AG${i.toString().padStart(2, '0')}`,
      description: `Part√≠culas planas y alargadas en agregado grueso (${i})`,
      standard: 'ASTM D4791-19 (Reapproved 2023)',
      accreditation: '*',
      quantity: 1,
      unit_price: 120.00
    });
  }
  return items;
}

// Funci√≥n para crear bundle de prueba
function createTestBundle(itemCount) {
  return {
    quote: {
      meta: {
        quote: {
          issue_date: '2025-01-03',
          delivery_days: 4,
          payment_terms: '30 d√≠as'
        },
        items: createTestItems(itemCount)
      },
      variant_id: 1
    },
    company: {
      name: 'Innovatech Solutions S.A.C.',
      ruc: '20123456789',
      contact: 'Juan P√©rez',
      phone: '987654321',
      email: 'juan@innovatech.com'
    },
    project: {
      name: 'Proyecto de Construcci√≥n Residencial',
      location: 'Lima, Per√∫',
      reference: 'REF-2025-001'
    },
    commercial: {
      advisor: 'Mar√≠a Gonz√°lez',
      phone: '987654322'
    }
  };
}

async function testMoveSections() {
  console.log('üß™ PROBANDO MOVIMIENTO DE SECCIONES A SEGUNDA P√ÅGINA\n');
  
  // Casos de prueba espec√≠ficos
  const testCases = [
    { count: 3, description: 'POCOS ITEMS (‚â§7): Todo en primera p√°gina' },
    { count: 5, description: 'POCOS ITEMS (‚â§7): Todo en primera p√°gina' },
    { count: 7, description: 'POCOS ITEMS (‚â§7): Todo en primera p√°gina' },
    { count: 8, description: 'MUCHOS ITEMS (8-14): Todo en primera p√°gina' },
    { count: 12, description: 'MUCHOS ITEMS (8-14): Todo en primera p√°gina' },
    { count: 15, description: 'MUY MUCHOS ITEMS (15+): Secciones a segunda p√°gina' },
    { count: 20, description: 'MUY MUCHOS ITEMS (15+): Secciones a segunda p√°gina' }
  ];
  
  for (const testCase of testCases) {
    try {
      console.log(`üìä ${testCase.description} - ${testCase.count} items`);
      
      const bundle = createTestBundle(testCase.count);
      const outputPath = `mover-secciones-${testCase.count}-items.pdf`;
      
      await generateSmartTemplatePdf(bundle, outputPath);
      console.log(`‚úÖ PDF generado: ${outputPath}`);
      
      // Verificar que el archivo existe
      const fs = require('fs');
      if (fs.existsSync(outputPath)) {
        const stats = fs.statSync(outputPath);
        console.log(`üìÅ Tama√±o: ${(stats.size / 1024).toFixed(2)} KB`);
      }
      
    } catch (error) {
      console.error(`‚ùå Error con ${testCase.count} items:`, error.message);
    }
    
    console.log('‚îÄ'.repeat(60));
  }
  
  console.log('\nüéØ SISTEMA DE MOVIMIENTO DE SECCIONES:');
  console.log('‚Ä¢ ‚â§14 items: Todo en primera p√°gina (tabla + condiciones + acreditaci√≥n)');
  console.log('‚Ä¢ 15+ items: Solo tabla en primera p√°gina, resto a segunda p√°gina');
  console.log('\nüìã Secciones que se mueven con 15+ items:');
  console.log('‚Ä¢ (*) Ensayo dentro del alcance de acreditaci√≥n INACAL.');
  console.log('‚Ä¢ I. CONDICIONES DEL SERVICIO');
  console.log('‚Ä¢ VALIDEZ DE LA OFERTA: 30 d√≠as calendario...');
  console.log('‚Ä¢ CONDICIONES ESPEC√çFICAS:');
  console.log('‚Ä¢ PLAZO ESTIMADO DE EJECUCI√ìN DE SERVICIO');
  console.log('‚Ä¢ CONTRAMUESTRA');
  console.log('\n‚ú® ¬°Sistema de movimiento de secciones funcionando!');
}

// Ejecutar pruebas
testMoveSections().catch(console.error);
