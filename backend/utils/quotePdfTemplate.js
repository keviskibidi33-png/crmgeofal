const PDFDocument = require('pdfkit');

// Helper: draw a table with borders
function drawTable(doc, { x, y, widths, rows, header = [], maxRowHeight = 25 }) {
  const startX = x;
  let cursorY = y;
  const baseRowHeight = Math.min(maxRowHeight, 25); // Usar altura m√°xima calculada

  // Funci√≥n para calcular el tama√±o de fuente √≥ptimo basado en la longitud del texto
  const calculateOptimalFontSize = (text, availableWidth, availableHeight, baseFontSize = 9) => {
    if (!text || String(text).length === 0) return baseFontSize;
    
    const textLength = String(text).length;
    
    // Reducci√≥n m√°s agresiva basada en la longitud del texto
    if (textLength > 150) return 5;      // Texto extremadamente largo
    if (textLength > 100) return 6;      // Texto muy largo
    if (textLength > 70) return 7;       // Texto largo
    if (textLength > 50) return 8;       // Texto medio-largo
    if (textLength > 30) return 8.5;     // Texto ligeramente largo
    
    return baseFontSize;
  };

  const drawRow = (cells, isHeader = false, isSection = false) => {
    let cx = startX;
    
    // Usar altura fija para evitar superposiciones
    const h = isSection ? 25 : baseRowHeight;
    
    // background for header/section
    if (isHeader) {
      doc.save().rect(cx, cursorY, widths.reduce((a,b)=>a+b,0), h).fill('#f2f2f2').restore();
    } else if (isSection) {
      doc.save().rect(cx, cursorY, widths.reduce((a,b)=>a+b,0), h).fill('#e9ecef').restore();
    }
    
    // cells
    cells.forEach((cell, i) => {
      doc.rect(cx, cursorY, widths[i], h).stroke();
      
      if (cell && String(cell).length > 0) {
        // Calcular tama√±o de fuente √≥ptimo para esta celda
        const availableWidth = widths[i] - 8;
        const availableHeight = h - 12;
        const optimalFontSize = calculateOptimalFontSize(cell, availableWidth, availableHeight, 9);
        
        doc.font(isSection ? 'Helvetica-Bold' : isHeader ? 'Helvetica-Bold' : 'Helvetica')
          .fontSize(optimalFontSize)
          .fillColor('#000')
          .text(String(cell), cx + 4, cursorY + 8, { 
            width: availableWidth, 
            height: availableHeight,
            align: i === cells.length - 1 ? 'right' : 'left' 
          });
      }
      cx += widths[i];
    });
    cursorY += h;
  };

  if (header.length) drawRow(header, true, false);
  rows.forEach(r => drawRow(r.cells, false, r.section === true));

  return cursorY; // new Y
}

// Helper: Add page break if needed
function checkPageBreak(doc, requiredSpace = 100) {
  if (doc.y + requiredSpace > doc.page.height - doc.page.margins.bottom) {
    doc.addPage();
    return true;
  }
  return false;
}


// Main render
exports.renderQuotePdf = async function renderQuotePdf(bundle, outFilePath) {
  return new Promise((resolve, reject) => {
    try {
      console.log('üîç renderQuotePdf - Iniciando generaci√≥n de PDF');
      console.log('üîç renderQuotePdf - Bundle:', {
        quote: bundle.quote?.id,
        items: bundle.items?.length,
        project: bundle.project?.id,
        company: bundle.company?.id
      });
      
      const doc = new PDFDocument({ size: 'A4', margin: 40 });
      const stream = doc.pipe(require('fs').createWriteStream(outFilePath));
      stream.on('finish', () => {
        console.log('‚úÖ renderQuotePdf - PDF generado exitosamente');
        resolve();
      });
      stream.on('error', (error) => {
        console.error('‚ùå renderQuotePdf - Error en stream:', error);
        reject(error);
      });

      // P√ÅGINA 1: COTIZACI√ìN PRINCIPAL
      console.log('üîç renderQuotePdf - Renderizando p√°gina 1');
      renderQuotePage1(doc, bundle);
      
      // P√ÅGINA 2: CONDICIONES DEL SERVICIO Y PAGO
      console.log('üîç renderQuotePdf - Renderizando p√°gina 2');
      doc.addPage();
      renderQuotePage2(doc, bundle);

      console.log('üîç renderQuotePdf - Finalizando PDF');
      doc.end();
    } catch (error) {
      console.error('‚ùå renderQuotePdf - Error general:', error);
      reject(error);
    }
  });
};

// P√°gina 1: Cotizaci√≥n principal
function renderQuotePage1(doc, bundle) {
  // T√≠tulo principal como en la segunda imagen: "COTIZACI√ìN N¬∞ 1478-25"
  const titleY = 40;
  const titleText = 'COTIZACI√ìN N¬∞ 1478-25';
  const titleWidth = 400;
  const titleX = (doc.page.width - titleWidth) / 2;
  
  // L√≠nea horizontal superior
  doc.moveTo(titleX, titleY).lineTo(titleX + titleWidth, titleY).stroke();
  
  // Texto del t√≠tulo centrado, negrita
  doc.font('Helvetica-Bold').fontSize(16).fillColor('#000')
    .text(titleText, titleX, titleY + 5, { width: titleWidth, align: 'center' });
  
  // L√≠nea horizontal inferior
  const titleBottomY = titleY + 25;
  doc.moveTo(titleX, titleBottomY).lineTo(titleX + titleWidth, titleBottomY).stroke();

  // Informaci√≥n del cliente y proyecto
  const clientInfoY = titleY + 35; // Ajustado para la nueva estructura
  renderClientInfo(doc, bundle, clientInfoY);

  // Texto introductorio
  const introY = doc.y + 0; // Reducido de 10 a 5 para mejor espaciado
  doc.font('Helvetica').fontSize(10).text('Es grato dirigirnos a Ud. a fin de alcanzarle, de acuerdo a su requerimiento, nuestra cotizaci√≥n por los servicios solicitados de los siguientes ensayos de laboratorio:', 50, introY);
  
  // Actualizar posici√≥n del cursor
  doc.y = introY + 20; // Aumentado de 15 a 20 para mejor separaci√≥n con la tabla

  // Tabla de ensayos - calcular espacio disponible
  const availableHeight = doc.page.height - doc.y - 100; // Espacio disponible para tabla
  const tableY = doc.y + 10;
  
  // Ajustar altura de filas seg√∫n espacio disponible
  const numRows = (bundle.items?.length || 1) + 1; // +1 para header
  const maxRowHeight = Math.min(25, Math.floor(availableHeight / numRows));
  
  renderTestsTable(doc, bundle, tableY, maxRowHeight);


  // Totales
  renderTotals(doc, bundle);
}

// P√°gina 2: Condiciones del servicio y pago
function renderQuotePage2(doc, bundle) {
  // I. CONDICIONES DEL SERVICIO
  doc.font('Helvetica-Bold').fontSize(12).text('I. CONDICIONES DEL SERVICIO', 50, 50);
  
  // Validez de la oferta
  doc.font('Helvetica-Bold').fontSize(10).text('VALIDEZ DE LA OFERTA', 50, doc.y + 15);
  doc.font('Helvetica').fontSize(9).text('30 d√≠as calendarios.', 50, doc.y + 5);
  doc.font('Helvetica').fontSize(9).text('Si la cotizaci√≥n lleg√≥ al l√≠mite de su validez, solicite una actualizaci√≥n.', 50, doc.y + 2);

  // Condiciones espec√≠ficas
  doc.font('Helvetica-Bold').fontSize(10).text('CONDICIONES ESPEC√çFICAS', 50, doc.y + 15);
  const condicionesEspecificas = [
    'El cliente deber√° enviar al laboratorio, para los ensayo en suelos, la cantidad m√≠nima de 30 kg para muestra fina y 70 kg para muestra gruesa.',
    'El cliente deber√° de entregar las muestras debidamente identificadas.',
    'El cliente deber√° especificar la Norma a ser utilizada para la ejecuci√≥n del ensayo, caso contrario se considera Norma ASTM o NTP vigente de acuerdo con el alcance del laboratorio.',
    'El cliente deber√° entregar las muestras en las instalaciones del LEM, ubicado en la Av. Mara√±√≥n N¬∞ 763, Los Olivos, Lima.'
  ];
  
  condicionesEspecificas.forEach(condicion => {
    doc.font('Helvetica').fontSize(9).text(`‚Ä¢ ${condicion}`, 50, doc.y + 3, { width: 500 });
  });

  // Plazo estimado
  doc.font('Helvetica-Bold').fontSize(10).text('PLAZO ESTIMADO DE EJECUCI√ìN DE SERVICIO', 50, doc.y + 15);
  const deliveryDays = bundle.quote?.meta?.quote?.delivery_days || bundle.quote?.delivery_days || 4;
  const plazos = [
    `El plazo de entrega ser√° de los resultados se estima ${deliveryDays} d√≠as h√°biles, este tiempo est√° sujeto a la programaci√≥n enviada por el √°rea de LEM.`,
    'El laboratorio enviar√° un correo de confirmaci√≥n de recepci√≥n y fecha de entrega del informe.'
  ];
  
  plazos.forEach(plazo => {
    doc.font('Helvetica').fontSize(9).text(`‚Ä¢ ${plazo}`, 50, doc.y + 3, { width: 500 });
  });

  // Contramuestra
  doc.font('Helvetica-Bold').fontSize(10).text('CONTRAMUESTRA', 50, doc.y + 15);
  doc.font('Helvetica').fontSize(9).text('Al finalizar los ensayos, la muestra sobrante/contramuestra permanecer√°n en custodia por un tiempo de 10 d√≠as calendario despu√©s de emitido el informe de ensayo. Siempre que se trate de una muestra dirimente, las contramuestras ser√°n devueltas a los clientes, previa coordinaci√≥n y autorizaci√≥n, caso contrario, ser√°n eliminadas si se trata de residuos del ensayo o contramuestras de ensayo.', 50, doc.y + 5, { width: 500 });

  // Confidencialidad
  doc.font('Helvetica-Bold').fontSize(10).text('CONFIDENCIALIDAD', 50, doc.y + 15);
  doc.font('Helvetica').fontSize(9).text('El laboratorio mantiene acuerdos de confidencialidad entre el cliente y el laboratorio, la divulgaci√≥n de la informaci√≥n sin la autorizaci√≥n de las partes, no es permitida. El laboratorio mantiene reserva de la informaci√≥n brindada por el cliente, salvo solicitud de la informaci√≥n por ley, o por entidades gubernamentales inmersos dentro del presente servicio de ensayo.', 50, doc.y + 5, { width: 500 });

  // Quejas y sugerencias
  doc.font('Helvetica-Bold').fontSize(10).text('QUEJAS Y SUGERENCIAS', 50, doc.y + 15);
  doc.font('Helvetica').fontSize(9).text('Si tiene alguna queja o sugerencia, lo invitamos a conocer nuestro Proceso de Atenci√≥n de Quejas, el cual iniciar√° 24 horas despu√©s de recibida la queja. El plazo l√≠mite establecido para la recepci√≥n de quejas respecto a un informe de ensayo es de 10 d√≠as despu√©s de emitido el documento. Pasado este plazo, no se aceptar√°n quejas bajo ninguna circunstancia.', 50, doc.y + 5, { width: 500 });

  // Entrega de informe
  doc.font('Helvetica-Bold').fontSize(10).text('ENTREGA DE INFORME DE ENSAYO', 50, doc.y + 15);
  const entregaInfo = [
    'Como parte de la mejora de nuestros procesos y en alineamiento con el Laboratorio Nacional INACAL-DM(PRODUCE) a partir de julio del 2022 los informes de ensayo son emitidos de forma digital con firma electr√≥nica.',
    'La entrega de los informes de ensayo ser√° mediante el intranet de la pagina web www.geofal.com.pe, y se enviar√° un correo de confirmaci√≥n con el usuario y clave para el acceso.',
    'Geofal no declara conformidad de sus informes de ensayo.',
    'En caso se requiera la modificaci√≥n del informe de ensayo a consecuencia de los datos proporcionados por el cliente, esta se realizar√° mediante la emisi√≥n de un nuevo informe que tendr√° un costo adicional de acuerdo a evaluaci√≥n.'
  ];
  
  entregaInfo.forEach(info => {
    doc.font('Helvetica').fontSize(9).text(`‚Ä¢ ${info}`, 50, doc.y + 3, { width: 500 });
  });

  // Verificar si necesitamos nueva p√°gina
  if (doc.y > 700) {
    doc.addPage();
  }

  // Horario de atenci√≥n
  doc.font('Helvetica-Bold').fontSize(10).text('HORARIO DE ATENCI√ìN', 50, doc.y + 20);
  doc.font('Helvetica').fontSize(9).text('El horario para recepci√≥n de muestra y entrega de informes es de Lunes a Viernes de 8:30am a 1:00pm y 2:00pm a 5:30pm, y S√°bado de 8:30am a 12:30pm', 50, doc.y + 5, { width: 500 });

  // L√≠nea separadora
  doc.moveTo(50, doc.y + 10).lineTo(550, doc.y + 10).stroke();

  // II. CONDICIONES DE PAGO
  doc.font('Helvetica-Bold').fontSize(12).text('II. CONDICIONES DE PAGO', 50, doc.y + 15);
  
  doc.font('Helvetica-Bold').fontSize(10).text('CONDICI√ìN:', 50, doc.y + 10);
  doc.font('Helvetica').fontSize(9).text('El pago del servicio deber√° ser realizado por Adelantado.', 50, doc.y + 5);
  
  doc.font('Helvetica-Bold').fontSize(10).text('RAZON SOCIAL:', 50, doc.y + 10);
  doc.font('Helvetica').fontSize(9).text('Geofal S.A.C. RUC: 20549356762', 50, doc.y + 5);
  
  doc.font('Helvetica').fontSize(9).text('S√≠rvase realizar el dep√≥sito correspondiente de los servicios a nuestra cuenta bancaria:', 50, doc.y + 10);

  // Cuentas bancarias
  const cuentasBancarias = [
    { banco: 'Cuenta de detraccion Banco de La Naci√≥n:', cuenta: 'N¬∫ 00-074-045472' },
    { banco: 'Cuenta corriente Interbank:', cuenta: 'N¬∞ 200-3005201096', cci: 'C√≥digo Interbancario (CCI) de Interbank: N¬∞ 003-200-003005201096-31' },
    { banco: 'Cuenta corriente BCP:', cuenta: 'N¬∞ 192 2024 3030 04', cci: 'C√≥digo Interbancario (CCI) del Banco de Cr√©dito del Per√∫ (BCP): N¬∞ 002-192-002 02430 3004-34' },
    { banco: 'Cuenta corriente BBVA:', cuenta: 'N¬∞ 0011-0174-0100082311-00', cci: 'C√≥digo Interbancario (CCI) BBVA: N¬∞ 011-174-000100082311-00' }
  ];

  cuentasBancarias.forEach(cuenta => {
    doc.font('Helvetica-Bold').fontSize(9).text(cuenta.banco, 50, doc.y + 10);
    doc.font('Helvetica').fontSize(9).text(cuenta.cuenta, 50, doc.y + 5);
    if (cuenta.cci) {
      doc.font('Helvetica').fontSize(9).text(cuenta.cci, 50, doc.y + 2);
    }
  });

  // L√≠nea separadora
  doc.moveTo(50, doc.y + 15).lineTo(550, doc.y + 15).stroke();

  // III. ACEPTACI√ìN DE LA COTIZACI√ìN
  doc.font('Helvetica-Bold').fontSize(12).text('III. ACEPTACI√ìN DE LA COTIZACI√ìN', 50, doc.y + 15);
  doc.font('Helvetica').fontSize(9).text('La aceptaci√≥n de la cotizaci√≥n de parte del cliente ser√° mediante, Pago respectivo del servicio seg√∫n cotizaci√≥n enviada, Env√≠o de la orden de servicio, Env√≠o de correo aceptando el servicio, a los siguientes correos laboratorio@geofal.com.pe y/o asesorcomercial@geofal.com.pe, en se√±al de conformidad.', 50, doc.y + 10, { width: 500 });
  doc.font('Helvetica').fontSize(9).text('Le agradeceremos que nos envie el comprobante del dep√≥sito realizado via correo electronico', 50, doc.y + 10, { width: 500 });

  // Informaci√≥n de contacto
  doc.font('Helvetica').fontSize(10).text('Atentamente,', 50, doc.y + 20);
  doc.font('Helvetica-Bold').fontSize(10).text('Geofal SAC', 50, doc.y + 10);
  doc.font('Helvetica').fontSize(9).text('Av. R√≠o Mara√±√≥n N¬∞ 763, Los Olivos, Lima', 50, doc.y + 5);
  doc.font('Helvetica').fontSize(9).text('Telf.: (01) 9051911 / (01) 7543070 - 982429895 - 956057624 - 993077479', 50, doc.y + 5);

  // Footer
  doc.font('Helvetica').fontSize(8).text('COM-F-01', 50, doc.page.height - 50);
  doc.font('Helvetica').fontSize(8).text('P√°gina 2 de 2', 300, doc.page.height - 50);
  doc.font('Helvetica').fontSize(8).text('Versi√≥n: 03 (01-08-2022)', 450, doc.page.height - 50);
  doc.font('Helvetica').fontSize(8).text('Fin del documento', 450, doc.page.height - 40);
}

// Informaci√≥n del cliente y proyecto
function renderClientInfo(doc, bundle, startY = 100) {
  const x = 50;
  const y = startY; // Usar la posici√≥n Y pasada como par√°metro
  const midX = 320; // Aumentado para m√°s separaci√≥n
  const lineH = 20; // Aumentado para mejor espaciado
  const leftWidth = 240; // Aumentado para m√°s espacio para REFERENCIA
  const rightWidth = 220; // Aumentado para m√°s espacio

  const cliente = bundle.company || bundle.quote.meta?.customer || {};
  const proyecto = {
    name: bundle.project?.name,
    location: bundle.project?.location,
    asesor: bundle.quote.meta?.quote?.commercial_name,
    issue_date: bundle.quote.issue_date,
    reference: bundle.quote.reference || bundle.quote.meta?.reference,
  };

  const left = [
    ['CLIENTE:', cliente?.name || cliente?.company_name || '-'],
    ['R.U.C.:', cliente?.ruc || '-'],
    ['CONTACTO:', cliente?.contact_name || '-'],
    ['TEL√âFONO:', cliente?.phone || cliente?.contact_phone || '-'],
    ['CORREO:', cliente?.email || cliente?.contact_email || '-'],
    ['FECHA SOLICITUD:', proyecto?.request_date || '-'],
    ['REFERENCIA:', proyecto?.reference || '-'],
  ];

  const right = [
    ['PROYECTO:', proyecto?.name || '-'],
    ['UBICACI√ìN:', proyecto?.location || '-'],
    ['ASESOR COMERCIAL:', proyecto?.asesor || '-'],
    ['TEL√âFONO:', proyecto?.asesor_phone || '-'],
    ['FECHA DE EMISI√ìN:', proyecto?.issue_date || '-'],
  ];

  // Dibujar columna izquierda con control de ancho
  let cy = y;
  left.forEach(([k, v]) => { 
    doc.font('Helvetica-Bold').fontSize(10).text(k, x, cy, { continued: true }); 
    // Ajustar ancho del texto seg√∫n el campo - REFERENCIA puede ser muy largo
    const textWidth = k === 'REFERENCIA:' ? leftWidth - 90 : leftWidth - 80;
    doc.font('Helvetica').fontSize(10).text(' ' + v, { width: textWidth }); 
    cy += lineH; 
  });

  // Dibujar columna derecha con control de ancho
  cy = y;
  right.forEach(([k, v]) => { 
    doc.font('Helvetica-Bold').fontSize(10).text(k, midX, cy, { continued: true }); 
    doc.font('Helvetica').fontSize(10).text(' ' + v, { width: rightWidth - 80 }); 
    cy += lineH; 
  });

  // L√≠nea vertical punteada entre columnas
  const maxLines = Math.max(left.length, right.length);
  const yStart = y - 2;
  const yEnd = y + maxLines * lineH + 2;
  doc.save().lineWidth(0.5).dash(2, { space: 3 }).moveTo(midX - 5, yStart).lineTo(midX - 5, yEnd).stroke().undash().restore();
  
  // Actualizar posici√≥n del cursor
  doc.y = y + maxLines * lineH + 15;
}

// Tabla de ensayos
function renderTestsTable(doc, bundle, tableY, maxRowHeight = 25) {
  const tableX = 80; // Aumentado de 50 a 80 para mejor margen horizontal
    doc.lineWidth(0.8);
  const widths = [60, 240, 80, 80, 50];
  const totalWidth = widths.reduce((a, b) => a + b, 0); // Ancho total de la tabla
  const header = ['C√≥digo', 'Descripci√≥n Ensayo', 'Norma', 'Costo Unitario', 'Cantidad'];
    
    const rows = [];
    
    if (!bundle.items || bundle.items.length === 0) {
    rows.push({ cells: ['-', 'No hay √≠tems en esta cotizaci√≥n', '-', '-', '-'] });
  } else {
    // Agregar √≠tems individuales con valores completos como en la segunda imagen
    bundle.items.forEach(it => {
      const unitPrice = Number(it.unit_price) || 0;
      const quantity = Number(it.quantity) || 0;
      
      rows.push({ 
        cells: [
          it.code, 
          it.description, 
          it.norm || '-', 
          unitPrice.toFixed(2), // Con costo unitario
          quantity.toString()
        ] 
      });
    });
  }
  
  // Usar altura m√°xima calculada
  const finalY = drawTable(doc, { x: tableX, y: tableY, widths, header, rows, maxRowHeight });
  
  // Actualizar posici√≥n del cursor
  doc.y = finalY;
}

// Totales - caja separada como en la imagen
function renderTotals(doc, bundle) {
  // Calcular totales reales de los √≠tems
  const subtotal = bundle.items?.reduce((sum, item) => {
    const unitPrice = Number(item.unit_price) || 0;
    const quantity = Number(item.quantity) || 0;
    return sum + (unitPrice * quantity);
  }, 0) || 0;
  
  const igv = subtotal * 0.18;
  const total = subtotal + igv;
  
  // Posici√≥n de la caja de totales (esquina inferior derecha)
  const boxWidth = 200;
  const boxHeight = 80;
  const boxX = doc.page.width - boxWidth - 50;
  const boxY = doc.page.height - boxHeight - 50;
  
  // Dibujar caja de totales
  doc.save()
    .rect(boxX, boxY, boxWidth, boxHeight)
    .fill('#f8f9fa')
    .stroke()
    .restore();
  
  // T√≠tulo de la caja
  doc.font('Helvetica-Bold').fontSize(10)
    .text('RESUMEN DE COSTOS', boxX + 10, boxY + 10);
  
  // L√≠nea separadora
  doc.moveTo(boxX + 10, boxY + 25).lineTo(boxX + boxWidth - 10, boxY + 25).stroke();
  
  // Filas de totales
  const lineHeight = 15;
  let currentY = boxY + 35;
  
  // Costo Parcial
  doc.font('Helvetica').fontSize(9)
    .text('Costo Parcial', boxX + 10, currentY);
  doc.font('Helvetica').fontSize(9)
    .text(subtotal.toFixed(2), boxX + boxWidth - 60, currentY, { align: 'right' });
  
  currentY += lineHeight;
  
  // IGV
  doc.font('Helvetica').fontSize(9)
    .text('IGV 18%', boxX + 10, currentY);
  doc.font('Helvetica').fontSize(9)
    .text(igv.toFixed(2), boxX + boxWidth - 60, currentY, { align: 'right' });
  
  currentY += lineHeight;
  
  // Costo Total
  doc.font('Helvetica-Bold').fontSize(10)
    .text('Costo Total', boxX + 10, currentY);
  doc.font('Helvetica-Bold').fontSize(10)
    .text(total.toFixed(2), boxX + boxWidth - 60, currentY, { align: 'right' });
}
