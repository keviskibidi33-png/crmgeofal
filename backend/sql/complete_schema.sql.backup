-- =====================================================
-- SCRIPT COMPLETO DE CREACIÓN DE TABLAS CRMGeoFal
-- =====================================================
-- Este script crea todas las 28 tablas del sistema CRMGeoFal
-- Ejecutar en orden para evitar errores de dependencias

-- =====================================================
-- 1. TABLA DE USUARIOS (Base del sistema)
-- =====================================================
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  apellido TEXT,
  email VARCHAR(100) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL DEFAULT 'vendedor',
  notification_enabled BOOLEAN NOT NULL DEFAULT TRUE,
  area TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 2. TABLA DE EMPRESAS
-- =====================================================
CREATE TABLE IF NOT EXISTS companies (
  id SERIAL PRIMARY KEY,
  ruc VARCHAR(20) NOT NULL UNIQUE,
  name VARCHAR(150) NOT NULL,
  address TEXT,
  type VARCHAR(20) DEFAULT 'empresa',
  dni VARCHAR(15),
  email VARCHAR(100),
  phone VARCHAR(30),
  contact_name VARCHAR(100),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 3. TABLA DE PROYECTOS
-- =====================================================
CREATE TABLE IF NOT EXISTS projects (
  id SERIAL PRIMARY KEY,
  company_id INTEGER NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
  name VARCHAR(150) NOT NULL,
  location VARCHAR(150),
  vendedor_id INTEGER REFERENCES users(id),
  laboratorio_id INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Índices para projects
CREATE INDEX IF NOT EXISTS idx_projects_company_id ON projects(company_id);
CREATE INDEX IF NOT EXISTS idx_projects_vendedor_id ON projects(vendedor_id);
CREATE INDEX IF NOT EXISTS idx_projects_laboratorio_id ON projects(laboratorio_id);

-- =====================================================
-- 4. TABLA DE CATEGORÍAS
-- =====================================================
CREATE TABLE IF NOT EXISTS categories (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_categories_name ON categories (LOWER(name));

-- =====================================================
-- 5. TABLA DE SUBCATEGORÍAS
-- =====================================================
CREATE TABLE IF NOT EXISTS subcategories (
  id SERIAL PRIMARY KEY,
  category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_subcategories_category_name ON subcategories (category_id, LOWER(name));

-- =====================================================
-- 6. TABLA DE SERVICIOS
-- =====================================================
CREATE TABLE IF NOT EXISTS services (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  area VARCHAR(50) NOT NULL CHECK (area IN ('laboratorio', 'ingenieria')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_services_name_area ON services (LOWER(name), area);

-- =====================================================
-- 7. TABLA DE SUBSERVICIOS
-- =====================================================
CREATE TABLE IF NOT EXISTS subservices (
  id SERIAL PRIMARY KEY,
  service_id INTEGER NOT NULL REFERENCES services(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_subservices_service_name ON subservices (service_id, LOWER(name));

-- =====================================================
-- 8. TABLA DE VARIANTES DE COTIZACIÓN
-- =====================================================
CREATE TABLE IF NOT EXISTS quote_variants (
  id SERIAL PRIMARY KEY,
  code VARCHAR(20) NOT NULL UNIQUE,
  title VARCHAR(150) NOT NULL,
  description TEXT,
  image_url TEXT,
  conditions JSONB,
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 9. TABLA DE COTIZACIONES
-- =====================================================
CREATE TABLE IF NOT EXISTS quotes (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  variant_id INTEGER REFERENCES quote_variants(id),
  created_by INTEGER REFERENCES users(id),
  client_contact VARCHAR(100),
  client_email VARCHAR(100),
  client_phone VARCHAR(30),
  issue_date DATE,
  subtotal NUMERIC(12,2) DEFAULT 0,
  igv NUMERIC(12,2) DEFAULT 0,
  total NUMERIC(12,2),
  status VARCHAR(30) DEFAULT 'borrador',
  reference TEXT,
  meta JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 10. TABLA DE ÍTEMS DE COTIZACIÓN
-- =====================================================
CREATE TABLE IF NOT EXISTS quote_items (
  id SERIAL PRIMARY KEY,
  quote_id INTEGER NOT NULL REFERENCES quotes(id) ON DELETE CASCADE,
  code VARCHAR(50),
  description TEXT,
  norm VARCHAR(50),
  unit_price NUMERIC(12,2),
  quantity INTEGER,
  partial_price NUMERIC(12,2),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 11. TABLA DE ADJUNTOS DE PROYECTOS
-- =====================================================
CREATE TABLE IF NOT EXISTS project_attachments (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  uploaded_by INTEGER REFERENCES users(id),
  file_url TEXT NOT NULL,
  file_type VARCHAR(20),
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 12. TABLA DE HISTORIAL DE PROYECTOS
-- =====================================================
CREATE TABLE IF NOT EXISTS project_history (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  action VARCHAR(100) NOT NULL,
  performed_by INTEGER REFERENCES users(id),
  performed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  notes TEXT
);

-- =====================================================
-- 13. TABLA DE SERVICIOS DE PROYECTOS
-- =====================================================
CREATE TABLE IF NOT EXISTS project_services (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  subservice_id INTEGER NOT NULL REFERENCES subservices(id) ON DELETE CASCADE,
  quantity INTEGER NOT NULL DEFAULT 1,
  provided_by INTEGER REFERENCES users(id),
  provided_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 14. TABLA DE AVISOS WHATSAPP
-- =====================================================
CREATE TABLE IF NOT EXISTS project_whatsapp_notices (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  sent_by INTEGER REFERENCES users(id),
  message TEXT NOT NULL,
  phone_number VARCHAR(20) NOT NULL,
  sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status VARCHAR(20) DEFAULT 'enviado'
);

-- =====================================================
-- 15. TABLA DE TICKETS
-- =====================================================
CREATE TABLE IF NOT EXISTS tickets (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(200) NOT NULL,
  description TEXT NOT NULL,
  priority VARCHAR(20) NOT NULL DEFAULT 'media',
  status VARCHAR(20) NOT NULL DEFAULT 'abierto',
  attachment_url TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);
CREATE INDEX IF NOT EXISTS idx_tickets_priority ON tickets(priority);

-- =====================================================
-- 16. TABLA DE HISTORIAL DE TICKETS
-- =====================================================
CREATE TABLE IF NOT EXISTS ticket_history (
  id SERIAL PRIMARY KEY,
  ticket_id INTEGER NOT NULL REFERENCES tickets(id) ON DELETE CASCADE,
  action VARCHAR(100) NOT NULL,
  performed_by INTEGER REFERENCES users(id),
  performed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  notes TEXT
);

-- =====================================================
-- 17. TABLA DE LEADS
-- =====================================================
CREATE TABLE IF NOT EXISTS leads (
  id SERIAL PRIMARY KEY,
  company_id INTEGER REFERENCES companies(id) ON DELETE CASCADE,
  name VARCHAR(150) NOT NULL,
  email VARCHAR(100),
  phone VARCHAR(30),
  status VARCHAR(30) NOT NULL DEFAULT 'nuevo',
  type VARCHAR(30) NOT NULL DEFAULT 'nuevo',
  assigned_to INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_leads_company_id ON leads(company_id);
CREATE INDEX IF NOT EXISTS idx_leads_status ON leads(status);
CREATE INDEX IF NOT EXISTS idx_leads_assigned_to ON leads(assigned_to);

-- =====================================================
-- 18. TABLA DE FACTURAS
-- =====================================================
CREATE TABLE IF NOT EXISTS invoices (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  quote_number VARCHAR(50) NOT NULL,
  received_at DATE,
  payment_due DATE,
  payment_status VARCHAR(20) NOT NULL DEFAULT 'pendiente',
  amount NUMERIC(12,2) NOT NULL DEFAULT 0,
  created_by INTEGER REFERENCES users(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_invoices_project_id ON invoices(project_id);
CREATE INDEX IF NOT EXISTS idx_invoices_payment_status ON invoices(payment_status);

-- =====================================================
-- 19. TABLA DE EVIDENCIAS
-- =====================================================
CREATE TABLE IF NOT EXISTS evidences (
  id SERIAL PRIMARY KEY,
  project_id INTEGER REFERENCES projects(id) ON DELETE CASCADE,
  invoice_id INTEGER REFERENCES invoices(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL,
  file_url TEXT NOT NULL,
  uploaded_by INTEGER REFERENCES users(id),
  uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 20. TABLA DE ACTIVIDADES
-- =====================================================
CREATE TABLE IF NOT EXISTS activities (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  entity_type VARCHAR(50),
  entity_id INTEGER,
  metadata JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_activities_user_id ON activities(user_id);
CREATE INDEX IF NOT EXISTS idx_activities_type ON activities(type);
CREATE INDEX IF NOT EXISTS idx_activities_entity ON activities(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_activities_created_at ON activities(created_at);
CREATE INDEX IF NOT EXISTS idx_activities_user_created ON activities(user_id, created_at);

COMMENT ON TABLE activities IS 'Registro de actividades recientes del sistema CRM';

-- =====================================================
-- 21. TABLA DE NOTIFICACIONES
-- =====================================================
CREATE TABLE IF NOT EXISTS notifications (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL,
  title VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  data JSONB,
  priority VARCHAR(20) DEFAULT 'normal',
  read_at TIMESTAMP NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_type ON notifications(type);
CREATE INDEX IF NOT EXISTS idx_notifications_read_at ON notifications(read_at);
CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at);
CREATE INDEX IF NOT EXISTS idx_notifications_user_unread ON notifications(user_id, read_at) WHERE read_at IS NULL;

COMMENT ON TABLE notifications IS 'Sistema de notificaciones para usuarios del CRM';

-- =====================================================
-- 22. TABLA DE METAS MENSUALES
-- =====================================================
CREATE TABLE IF NOT EXISTS monthly_goals (
  id SERIAL PRIMARY KEY,
  year INTEGER NOT NULL,
  month INTEGER NOT NULL,
  goal_quantity INTEGER NOT NULL,
  created_by INTEGER NOT NULL REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  updated_by INTEGER REFERENCES users(id),
  UNIQUE(year, month)
);

CREATE INDEX IF NOT EXISTS idx_monthly_goals_year_month ON monthly_goals(year, month);
CREATE INDEX IF NOT EXISTS idx_monthly_goals_created_by ON monthly_goals(created_by);

COMMENT ON TABLE monthly_goals IS 'Metas mensuales de ventas configuradas por el jefe comercial';

-- =====================================================
-- 23. TABLA DE AUDITORÍA GENERAL
-- =====================================================
CREATE TABLE IF NOT EXISTS audit_log (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  action VARCHAR(100) NOT NULL,
  entity VARCHAR(50),
  entity_id INTEGER,
  details TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 24. TABLA DE AUDITORÍA DE COTIZACIONES
-- =====================================================
CREATE TABLE IF NOT EXISTS audit_quotes (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  action VARCHAR(50) NOT NULL,
  entity VARCHAR(30) NOT NULL,
  entity_id INTEGER,
  details TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 25. TABLA DE LOG DE LIMPIEZA DE AUDITORÍA
-- =====================================================
CREATE TABLE IF NOT EXISTS audit_cleanup_log (
  id SERIAL PRIMARY KEY,
  cleanup_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  hours_threshold INTEGER NOT NULL,
  deleted_count INTEGER NOT NULL,
  total_before INTEGER NOT NULL,
  total_after INTEGER NOT NULL,
  executed_by INTEGER REFERENCES users(id),
  notes TEXT
);

CREATE INDEX IF NOT EXISTS idx_audit_cleanup_date ON audit_cleanup_log(cleanup_date);

-- =====================================================
-- 26. TABLA DE HISTORIAL DE EXPORTACIONES
-- =====================================================
CREATE TABLE IF NOT EXISTS export_history (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  type VARCHAR(20) NOT NULL,
  resource VARCHAR(50) NOT NULL,
  client_id INTEGER REFERENCES companies(id),
  project_id INTEGER REFERENCES projects(id),
  commercial_id INTEGER REFERENCES users(id),
  laboratory_id INTEGER REFERENCES users(id),
  status VARCHAR(20) DEFAULT 'nuevo',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_export_history_type ON export_history(type);
CREATE INDEX IF NOT EXISTS idx_export_history_created_at ON export_history(created_at);
CREATE INDEX IF NOT EXISTS idx_export_history_client_id ON export_history(client_id);
CREATE INDEX IF NOT EXISTS idx_export_history_project_id ON export_history(project_id);
CREATE INDEX IF NOT EXISTS idx_export_history_status ON export_history(status);

-- =====================================================
-- NOTA: Las tablas project_categories y project_subcategories
-- se definen en el archivo project_categories_schema.sql
-- =====================================================

-- =====================================================
-- FUNCIONES AUXILIARES
-- =====================================================

-- Función para obtener la última limpieza de auditoría
CREATE OR REPLACE FUNCTION get_last_cleanup()
RETURNS TIMESTAMP AS $$
BEGIN
  RETURN (
    SELECT cleanup_date 
    FROM audit_cleanup_log 
    ORDER BY cleanup_date DESC 
    LIMIT 1
  );
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- COMENTARIOS FINALES
-- =====================================================
-- Este script crea todas las 28 tablas del sistema CRMGeoFal
-- Las tablas están organizadas por dependencias para evitar errores
-- Ejecutar este script en una base de datos PostgreSQL limpia
-- =====================================================
